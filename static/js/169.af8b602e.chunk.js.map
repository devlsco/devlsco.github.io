{"version":3,"file":"static/js/169.af8b602e.chunk.js","mappings":"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","sources":["views/twitch/filesay/index.js"],"sourcesContent":["import { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { Typography, TextField, Button, Grid, MenuItem, Select, FormControl, InputLabel, Slider, Autocomplete } from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    mode: 'dark'\r\n  }\r\n});\r\n\r\nconst marks = [\r\n  {\r\n    value: 25,\r\n    label: '25ms'\r\n  },\r\n  {\r\n    value: 50,\r\n    label: '50ms'\r\n  },\r\n  {\r\n    value: 100,\r\n    label: '100ms'\r\n  },\r\n  {\r\n    value: 250,\r\n    label: '250ms'\r\n  },\r\n  {\r\n    value: 500,\r\n    label: '500ms'\r\n  },\r\n  {\r\n    value: 750,\r\n    label: '750ms'\r\n  },\r\n  {\r\n    value: 1000,\r\n    label: '1s'\r\n  }\r\n];\r\n\r\nfunction valuetext(value) {\r\n  return `${value}ms`;\r\n}\r\n\r\nasync function getName(id) {\r\n  if (!id) return null;\r\n\r\n  const response = await fetch(`https://api.twitch.tv/helix/users?id=${encodeURIComponent(id)}`, {\r\n    responseType: 'json',\r\n    throwHttpErrors: false,\r\n    headers: {\r\n      'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n    }\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message ? `${data.error}, ${data.message}` : response.statusText);\r\n  }\r\n\r\n  if (!data.data[0]) {\r\n    throw new Error('Login not found.');\r\n  }\r\n\r\n  return data.data[0].login;\r\n}\r\n\r\nfunction chunkArray(array, size) {\r\n  let result = [];\r\n  for (let i = 0; i < array.length; i += size) {\r\n    let chunk = array.slice(i, i + size);\r\n    result.push(chunk);\r\n  }\r\n  return result;\r\n}\r\n\r\nconst Page = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [outputData, setOutputData] = useState(null);\r\n  const [outputError, setOutputError] = useState(null);\r\n  const [selectedType, setSelectedType] = useState('');\r\n  const [channel, setChannel] = useState('');\r\n  const [sliderValue, setSliderValue] = useState(100);\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    document.title = `LsCo Software - Filesay`;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const login = localStorage.getItem('login') || null;\r\n\r\n    if (!login) {\r\n      setOutputData('Log in to get started.');\r\n      setOutputError(null);\r\n    }\r\n  }, []);\r\n\r\n  async function banUser(channelID, users) {\r\n    try {\r\n      await Promise.all(\r\n        chunkArray(users, 100).map(async (chunk) => {\r\n          const response = await fetch(`https://api.twitch.tv/helix/users?login=${chunk.map((data) => data.login).join('&login=')}`, {\r\n            headers: {\r\n              'Client-ID': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n            }\r\n          });\r\n          const data = await response.json();\r\n          if (!response.ok) throw new Error(`API Error -> Status: ${data.error}, ${data.status} - ${data.message}`);\r\n\r\n          data.data.forEach((user) => {\r\n            const existingUser = users.find((u) => u.login === user.login);\r\n            if (existingUser) existingUser.id = user.id;\r\n          });\r\n\r\n          return data.data.map((user) => user.id);\r\n        })\r\n      );\r\n\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).userId\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).clientID,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, reason: data.reason } })\r\n          }\r\n        )\r\n          .then(async (response) => {\r\n            if (response.headers.get('ratelimit-remaining') == '0') {\r\n              throw new Error(`Too many requests`);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function timeoutUser(channelID, users) {\r\n    try {\r\n      await Promise.all(\r\n        chunkArray(users, 100).map(async (chunk) => {\r\n          const response = await fetch(`https://api.twitch.tv/helix/users?login=${chunk.map((data) => data.login).join('&login=')}`, {\r\n            headers: {\r\n              'Client-ID': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n            }\r\n          });\r\n          const data = await response.json();\r\n          if (!response.ok) throw new Error(`API Error -> Status: ${data.error}, ${data.status} - ${data.message}`);\r\n\r\n          data.data.forEach((user) => {\r\n            const existingUser = users.find((u) => u.login === user.login);\r\n            if (existingUser) existingUser.id = user.id;\r\n          });\r\n\r\n          return data.data.map((user) => user.id);\r\n        })\r\n      );\r\n\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).userId\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).clientID,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, duration: Number(data.duration), reason: data.reason } })\r\n          }\r\n        )\r\n          .then(async (response) => {\r\n            if (response.headers.get('ratelimit-remaining') == '0') {\r\n              throw new Error(`Too many requests`);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function banUser_id(channelID, users) {\r\n    try {\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).userId\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).clientID,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, reason: data.reason } })\r\n          }\r\n        )\r\n          .then(async (response) => {\r\n            if (response.headers.get('ratelimit-remaining') == '0') {\r\n              throw new Error(`Too many requests`);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function timeoutUser_id(channelID, users) {\r\n    try {\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).userId\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).clientID,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, duration: Number(data.duration), reason: data.reason } })\r\n          }\r\n        )\r\n          .then(async (response) => {\r\n            if (response.headers.get('ratelimit-remaining') == '0') {\r\n              throw new Error(`Too many requests`);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function unbanUser(channelID, users) {\r\n    try {\r\n      await Promise.all(\r\n        chunkArray(users, 100).map(async (chunk) => {\r\n          const response = await fetch(`https://api.twitch.tv/helix/users?login=${chunk.map((data) => data.login).join('&login=')}`, {\r\n            headers: {\r\n              'Client-ID': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n            }\r\n          });\r\n          const data = await response.json();\r\n          if (!response.ok) throw new Error(`API Error -> Status: ${data.error}, ${data.status} - ${data.message}`);\r\n\r\n          data.data.forEach((user) => {\r\n            const existingUser = users.find((u) => u.login === user.login);\r\n            if (existingUser) existingUser.id = user.id;\r\n          });\r\n\r\n          return data.data.map((user) => user.id);\r\n        })\r\n      );\r\n\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).userId\r\n          }&user_id=${data.id}`,\r\n          {\r\n            method: 'DELETE',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).clientID,\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n        )\r\n          .then((response) => {\r\n            if (response.headers.get('ratelimit-remaining') == '0') {\r\n              throw new Error(`Too many requests`);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n\r\n          await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function unbanUser_id(channelID, users) {\r\n    try {\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).userId\r\n          }&user_id=${data.id}`,\r\n          {\r\n            method: 'DELETE',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).clientID,\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n        )\r\n          .then((response) => {\r\n            if (response.headers.get('ratelimit-remaining') == '0') {\r\n              throw new Error(`Too many requests`);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  const handleSearchChange = async (value) => {\r\n    if (value.trim() !== '') {\r\n      const response = await fetch(`https://api.twitch.tv/helix/search/channels?query=${value}`, {\r\n        headers: {\r\n          'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setSearchResults(\r\n          data.data.map((channel) => {\r\n            return `${new RegExp('^\\\\w+$').test(channel.display_name) ? channel.display_name : channel.broadcaster_login} - ID: ${\r\n              channel.id\r\n            }`;\r\n          })\r\n        );\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } else {\r\n      setSearchResults([]);\r\n    }\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    if (channel.trim() === '') {\r\n      setOutputData(null);\r\n      setOutputError('You must specify a channel');\r\n      return;\r\n    }\r\n\r\n    if (selectedType === '') {\r\n      setOutputData(null);\r\n      setOutputError('You must specify a filesay type');\r\n      return;\r\n    }\r\n\r\n    if (message.trim() === '') {\r\n      setOutputData(null);\r\n      setOutputError('You must specify a filesay list');\r\n      return;\r\n    }\r\n\r\n    if (localStorage.getItem('login') === null) {\r\n      setOutputData('Log in to get started.');\r\n      setOutputError(null);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const channelID = channel.split(' ')[3].trim();\r\n      const text = message.split(/\\r?\\n/).map((x) => x.trim());\r\n      let type;\r\n\r\n      if (selectedType === 'ban-list-id') {\r\n        type = 4;\r\n      } else if (selectedType === 'unban-list-id') {\r\n        type = 3;\r\n      } else if (selectedType === 'ban-list-name') {\r\n        type = 2;\r\n      } else if (selectedType === 'unban-list-name') {\r\n        type = 1;\r\n      } else {\r\n        type = 0;\r\n      }\r\n\r\n      const messages = [];\r\n      const timeouts = [];\r\n      const timeouts_id = [];\r\n      const unbans = [];\r\n      const bans = [];\r\n      const unbans_id = [];\r\n      const bans_id = [];\r\n\r\n      for (let i = 0; i < text.length; i++) {\r\n        const line = text[i];\r\n        if (line) {\r\n          switch (type) {\r\n            case 0: {\r\n              switch (true) {\r\n                case line.match(/^(\\.|\\/)timeout\\s\\w+\\s(\\d+)(\\s.+)?/i) !== null: {\r\n                  const [, login, duration, ...reason] = line.split(/\\s+/);\r\n                  if (!timeouts.find((x) => x.login === login.toLowerCase())) {\r\n                    timeouts.push({ login: login.toLowerCase(), duration: duration, reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)ban\\s\\w+(\\s.+)?/i) !== null: {\r\n                  const [, login, ...reason] = line.split(/\\s+/);\r\n                  if (!bans.find((x) => x.login === login.toLowerCase())) {\r\n                    bans.push({ login: login.toLowerCase(), reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)unban\\s\\w+/i) !== null || line.match(/^(\\.|\\/)untimeout\\s\\w+/i) !== null: {\r\n                  const [, login] = line.split(/\\s+/);\r\n                  if (!unbans.find((x) => x.login === login.toLowerCase())) {\r\n                    unbans.push({ login: login.toLowerCase() });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)timeoutid\\s\\w+\\s(\\d+)(\\s.+)?/i) !== null: {\r\n                  const [, id, duration, ...reason] = line.split(/\\s+/);\r\n                  if (!timeouts_id.find((x) => x.id === id)) {\r\n                    timeouts_id.push({ id: id, duration: duration, reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)banid\\s\\w+(\\s.+)?/i) !== null: {\r\n                  const [, id, ...reason] = line.split(/\\s+/);\r\n                  if (!bans_id.find((x) => x.id === id)) {\r\n                    bans_id.push({ id: id, reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)unbanid\\s\\w+/i) !== null || line.match(/^(\\.|\\/)untimeoutid\\s\\w+/i) !== null: {\r\n                  const [, id] = line.split(/\\s+/);\r\n                  if (!unbans_id.find((x) => x.id === id)) {\r\n                    unbans_id.push({ id: id });\r\n                  }\r\n                  break;\r\n                }\r\n                default: {\r\n                  messages.push({ message: line });\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            case 1: {\r\n              const [login] = line.split(/\\s+/);\r\n              if (!unbans.find((x) => x.login === login.toLowerCase())) {\r\n                unbans.push({ login: login.toLowerCase() });\r\n              }\r\n              break;\r\n            }\r\n            case 2: {\r\n              const [login, ...reason] = line.split(/\\s+/);\r\n              if (!bans.find((x) => x.login === login.toLowerCase())) {\r\n                bans.push({\r\n                  login: login.toLowerCase(),\r\n                  reason: reason ? reason.join(' ') : `Ban-list`\r\n                });\r\n              }\r\n              break;\r\n            }\r\n            case 3: {\r\n              const [id] = line.split(/\\s+/);\r\n              if (!unbans.find((x) => x.id === id)) {\r\n                unbans_id.push({ id: id });\r\n              }\r\n              break;\r\n            }\r\n            case 4: {\r\n              const [id, ...reason] = line.split(/\\s+/);\r\n              if (!bans.find((x) => x.id === id)) {\r\n                bans_id.push({ id: id, reason: reason ? reason.join(' ') : `Ban-list` });\r\n              }\r\n              break;\r\n            }\r\n            default: {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log('Bans', bans, bans.length);\r\n      console.log('Unbans', unbans, unbans.length);\r\n      console.log('Bans (ID)', bans_id, bans_id.length);\r\n      console.log('Unbans (ID)', unbans_id, unbans_id.length);\r\n      console.log('Timeouts', timeouts, timeouts.length);\r\n      console.log('Timeouts (ID)', timeouts_id, timeouts_id.length);\r\n      console.log('Messages', messages, messages.length);\r\n\r\n      await Promise.all([\r\n        banUser(channelID, bans),\r\n        unbanUser(channelID, unbans),\r\n        banUser_id(channelID, bans_id),\r\n        unbanUser_id(channelID, unbans_id),\r\n        timeoutUser(channelID, timeouts),\r\n        timeoutUser_id(channelID, timeouts_id)\r\n      ]);\r\n\r\n      const nick = await getName(JSON.parse(localStorage.getItem('login')).userId);\r\n\r\n      if (messages.length) {\r\n        const ws = new WebSocket('wss://irc-ws.chat.twitch.tv');\r\n\r\n        ws.onopen = async () => {\r\n          ws.send('CAP REQ :twitch.tv/membership twitch.tv/tags twitch.tv/commands');\r\n          ws.send('PASS oauth:' + JSON.parse(localStorage.getItem('login')).token);\r\n          ws.send('NICK ' + nick);\r\n\r\n          for (let i = 0; i < messages.length; i++) {\r\n            const message = messages[i].message;\r\n            ws.send(`PRIVMSG #${channel.split(' ')[0].trim().toLowerCase()} :${message}`);\r\n            await new Promise((x) => setTimeout(x, sliderValue));\r\n\r\n            if (i === messages.length - 1) {\r\n              ws.close();\r\n            }\r\n          }\r\n        };\r\n      }\r\n\r\n      setOutputData('Doing...');\r\n      setOutputError(null);\r\n    } catch (err) {\r\n      console.log(err);\r\n      setOutputData(null);\r\n      setOutputError(err.message);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    setSliderValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Filesay\" description=\"Ban/timeout multiple users in a specific channel.\">\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item xs={12}>\r\n          <Autocomplete\r\n            options={searchResults}\r\n            onChange={(event, value) => {\r\n              setChannel(value);\r\n            }}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                fullWidth\r\n                id=\"standard-basic\"\r\n                label=\"Channel\"\r\n                variant=\"filled\"\r\n                onChange={(event) => {\r\n                  handleSearchChange(event.target.value);\r\n                }}\r\n              />\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <FormControl fullWidth variant=\"filled\">\r\n            <InputLabel id=\"type-label\">Type</InputLabel>\r\n            <Select value={selectedType} onChange={(e) => setSelectedType(e.target.value)} labelId=\"type-label\" id=\"type-select\">\r\n              <MenuItem value=\"filesay\">Filesay</MenuItem>\r\n              <MenuItem value=\"ban-list-name\">Ban List (Name)</MenuItem>\r\n              <MenuItem value=\"unban-list-name\">Unban List (Name)</MenuItem>\r\n              <MenuItem value=\"ban-list-id\">Ban List (ID)</MenuItem>\r\n              <MenuItem value=\"unban-list-id\">Unban List (ID)</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={10}\r\n            id=\"standard-basic\"\r\n            label=\"Text\"\r\n            variant=\"filled\"\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n          />\r\n        </Grid>\r\n        <ThemeProvider theme={darkTheme}>\r\n          <Grid item xs={12}>\r\n            <Typography gutterBottom>Output delay</Typography>\r\n            <FormControl fullWidth variant=\"filled\">\r\n              <Slider\r\n                aria-label=\"Delay\"\r\n                value={sliderValue}\r\n                onChange={handleSliderChange}\r\n                getAriaValueText={valuetext}\r\n                step={null}\r\n                valueLabelDisplay=\"auto\"\r\n                marks={marks}\r\n                min={marks[0].value}\r\n                max={marks[marks.length - 1].value}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n        </ThemeProvider>\r\n        <Grid item xs={12}>\r\n          <Button variant=\"contained\" fullWidth onClick={handleClick}>\r\n            Send\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {outputError && (\r\n            <Typography variant=\"body2\" style={{ color: 'red', marginTop: '10px', textAlign: 'center' }}>\r\n              {outputError}\r\n            </Typography>\r\n          )}\r\n          {outputData && (\r\n            <Typography variant=\"body2\" style={{ marginTop: '10px', textAlign: 'center' }}>\r\n              {outputData}\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["darkTheme","createTheme","palette","mode","marks","value","label","valuetext","chunkArray","array","size","result","i","length","chunk","slice","push","Page","message","setMessage","useState","outputData","setOutputData","outputError","setOutputError","selectedType","setSelectedType","channel","setChannel","sliderValue","setSliderValue","searchResults","setSearchResults","async","banUser","channelID","users","Promise","all","map","response","fetch","data","login","join","headers","json","ok","Error","error","status","forEach","user","existingUser","find","u","id","JSON","parse","localStorage","getItem","userId","method","Authorization","token","clientID","body","stringify","user_id","reason","then","get","catch","console","log","x","setTimeout","timeoutUser","duration","Number","banUser_id","timeoutUser_id","unbanUser","unbanUser_id","useEffect","document","title","_jsx","MainCard","description","children","_jsxs","Grid","container","spacing","alignItems","item","xs","Autocomplete","options","onChange","event","renderInput","params","TextField","fullWidth","variant","trim","RegExp","test","display_name","broadcaster_login","handleSearchChange","target","FormControl","InputLabel","Select","e","labelId","MenuItem","multiline","rows","ThemeProvider","theme","Typography","gutterBottom","Slider","handleSliderChange","newValue","getAriaValueText","step","valueLabelDisplay","min","max","Button","onClick","split","text","type","messages","timeouts","timeouts_id","unbans","bans","unbans_id","bans_id","line","match","toLowerCase","nick","encodeURIComponent","responseType","throwHttpErrors","statusText","getName","ws","WebSocket","onopen","send","close","err","style","color","marginTop","textAlign"],"sourceRoot":""}