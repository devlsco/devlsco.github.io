{"version":3,"file":"static/js/312.ffb01397.chunk.js","mappings":"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","sources":["views/twitch/crossban/index.js"],"sourcesContent":["import { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport {\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  MenuItem,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  Slider,\r\n  Autocomplete,\r\n  Paper,\r\n  Chip,\r\n  Avatar\r\n} from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    mode: 'dark'\r\n  }\r\n});\r\n\r\nconst ListItem = styled('li')(({ theme }) => ({\r\n  margin: theme.spacing(0.5)\r\n}));\r\n\r\nconst marks = [\r\n  {\r\n    value: 25,\r\n    label: '25ms'\r\n  },\r\n  {\r\n    value: 100,\r\n    label: '100ms'\r\n  },\r\n  {\r\n    value: 250,\r\n    label: '250ms'\r\n  },\r\n  {\r\n    value: 500,\r\n    label: '500ms'\r\n  },\r\n  {\r\n    value: 750,\r\n    label: '750ms'\r\n  },\r\n  {\r\n    value: 1000,\r\n    label: '1s'\r\n  }\r\n];\r\n\r\nfunction valuetext(value) {\r\n  return `${value}ms`;\r\n}\r\n\r\nasync function getName(id) {\r\n  if (!id) return null;\r\n\r\n  const response = await fetch(`https://api.twitch.tv/helix/users?id=${encodeURIComponent(id)}`, {\r\n    responseType: 'json',\r\n    throwHttpErrors: false,\r\n    headers: {\r\n      'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n    }\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message ? `${data.error}, ${data.message}` : response.statusText);\r\n  }\r\n\r\n  if (!data.data[0]) {\r\n    throw new Error('Login not found.');\r\n  }\r\n\r\n  return data.data[0].login;\r\n}\r\n\r\nconst getNames = async (channels) => {\r\n  const idParams = channels.map((channel) => `id=${encodeURIComponent(channel.id)}`).join('&');\r\n  const url = `https://api.twitch.tv/helix/users?${idParams}`;\r\n\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n    }\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message ? `${data.error}, ${data.message}` : response.statusText);\r\n  }\r\n\r\n  const names = data.data.map((user) => ({ id: user.id, name: user.login, pfp: user.profile_image_url }));\r\n  return names;\r\n};\r\n\r\nfunction chunkArray(array, size) {\r\n  let result = [];\r\n  for (let i = 0; i < array.length; i += size) {\r\n    let chunk = array.slice(i, i + size);\r\n    result.push(chunk);\r\n  }\r\n  return result;\r\n}\r\n\r\nconst Page = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [outputData, setOutputData] = useState(null);\r\n  const [outputError, setOutputError] = useState(null);\r\n  const [selectedType, setSelectedType] = useState('');\r\n  const [channel, setChannel] = useState('');\r\n  const [sliderValue, setSliderValue] = useState(100);\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [chipData, setChipData] = useState([]);\r\n\r\n  const handleDelete = (chipToDelete) => {\r\n    localStorage.setItem(\r\n      'crossbanChannels',\r\n      JSON.stringify(JSON.parse(localStorage.getItem('crossbanChannels')).filter((chip) => chip.id !== chipToDelete.id))\r\n    );\r\n    setChipData((chips) => chips.filter((chip) => chip.id !== chipToDelete.id));\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.title = `LsCo Software - Crossban`;\r\n\r\n    const login = localStorage.getItem('login') || null;\r\n\r\n    if (!login) {\r\n      setOutputData('Log in to get started.');\r\n      setOutputError(null);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const storedChannels = localStorage.getItem('crossbanChannels');\r\n      if (storedChannels) {\r\n        const parsedChannels = JSON.parse(storedChannels);\r\n        const names = await getNames(parsedChannels);\r\n        setChipData(names ?? []);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  async function banUser(channelID, users) {\r\n    try {\r\n      await Promise.all(\r\n        chunkArray(users, 100).map(async (chunk) => {\r\n          const response = await fetch(`https://api.twitch.tv/helix/users?login=${chunk.map((data) => data.login).join('&login=')}`, {\r\n            headers: {\r\n              'Client-ID': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n            }\r\n          });\r\n          const data = await response.json();\r\n          if (!response.ok) throw new Error(`API Error -> Status: ${data.error}, ${data.status} - ${data.message}`);\r\n\r\n          data.data.forEach((user) => {\r\n            const existingUser = users.find((u) => u.login === user.login);\r\n            if (existingUser) existingUser.id = user.id;\r\n          });\r\n\r\n          return data.data.map((user) => user.id);\r\n        })\r\n      );\r\n\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).userId\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).clientID,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, reason: data.reason } })\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function timeoutUser(channelID, users) {\r\n    try {\r\n      await Promise.all(\r\n        chunkArray(users, 100).map(async (chunk) => {\r\n          const response = await fetch(`https://api.twitch.tv/helix/users?login=${chunk.map((data) => data.login).join('&login=')}`, {\r\n            headers: {\r\n              'Client-ID': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n            }\r\n          });\r\n          const data = await response.json();\r\n          if (!response.ok) throw new Error(`API Error -> Status: ${data.error}, ${data.status} - ${data.message}`);\r\n\r\n          data.data.forEach((user) => {\r\n            const existingUser = users.find((u) => u.login === user.login);\r\n            if (existingUser) existingUser.id = user.id;\r\n          });\r\n\r\n          return data.data.map((user) => user.id);\r\n        })\r\n      );\r\n\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).userId\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).clientID,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, duration: Number(data.duration), reason: data.reason } })\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function banUser_id(channelID, users) {\r\n    try {\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).userId\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).clientID,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, reason: data.reason } })\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function timeoutUser_id(channelID, users) {\r\n    try {\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).userId\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).clientID,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, duration: Number(data.duration), reason: data.reason } })\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function unbanUser(channelID, users) {\r\n    try {\r\n      await Promise.all(\r\n        chunkArray(users, 100).map(async (chunk) => {\r\n          const response = await fetch(`https://api.twitch.tv/helix/users?login=${chunk.map((data) => data.login).join('&login=')}`, {\r\n            headers: {\r\n              'Client-ID': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n            }\r\n          });\r\n          const data = await response.json();\r\n          if (!response.ok) throw new Error(`API Error -> Status: ${data.error}, ${data.status} - ${data.message}`);\r\n\r\n          data.data.forEach((user) => {\r\n            const existingUser = users.find((u) => u.login === user.login);\r\n            if (existingUser) existingUser.id = user.id;\r\n          });\r\n\r\n          return data.data.map((user) => user.id);\r\n        })\r\n      );\r\n\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).userId\r\n          }&user_id=${data.id}`,\r\n          {\r\n            method: 'DELETE',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).clientID,\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function unbanUser_id(channelID, users) {\r\n    try {\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).userId\r\n          }&user_id=${data.id}`,\r\n          {\r\n            method: 'DELETE',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).clientID,\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n        );\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  const handleSearchChange = async (value) => {\r\n    if (value.trim() !== '') {\r\n      const response = await fetch(`https://api.twitch.tv/helix/search/channels?query=${value}`, {\r\n        headers: {\r\n          'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setSearchResults(\r\n          data.data.map((channel) => {\r\n            return `${new RegExp('^\\\\w+$').test(channel.display_name) ? channel.display_name : channel.broadcaster_login} - ID: ${\r\n              channel.id\r\n            }`;\r\n          })\r\n        );\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } else {\r\n      setSearchResults([]);\r\n    }\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    if (!localStorage.getItem('crossbanChannels')) {\r\n      setOutputData(null);\r\n      setOutputError('You must have crossban channel(s)');\r\n      return;\r\n    }\r\n\r\n    if (selectedType === '') {\r\n      setOutputData(null);\r\n      setOutputError('You must specify a crossban type');\r\n      return;\r\n    }\r\n\r\n    if (message.trim() === '') {\r\n      setOutputData(null);\r\n      setOutputError('You must specify a crossban list');\r\n      return;\r\n    }\r\n\r\n    if (localStorage.getItem('login') === null) {\r\n      setOutputData('Log in to get started.');\r\n      setOutputError(null);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const text = message.split(/\\r?\\n/).map((x) => x.trim());\r\n      let type;\r\n\r\n      if (selectedType === 'ban-list-id') {\r\n        type = 4;\r\n      } else if (selectedType === 'unban-list-id') {\r\n        type = 3;\r\n      } else if (selectedType === 'ban-list-name') {\r\n        type = 2;\r\n      } else if (selectedType === 'unban-list-name') {\r\n        type = 1;\r\n      } else {\r\n        type = 0;\r\n      }\r\n\r\n      const messages = [];\r\n      const timeouts = [];\r\n      const timeouts_id = [];\r\n      const unbans = [];\r\n      const bans = [];\r\n      const unbans_id = [];\r\n      const bans_id = [];\r\n\r\n      for (let i = 0; i < text.length; i++) {\r\n        const line = text[i];\r\n        if (line) {\r\n          switch (type) {\r\n            case 0: {\r\n              switch (true) {\r\n                case line.match(/^(\\.|\\/)timeout\\s\\w+\\s(\\d+)(\\s.+)?/i) !== null: {\r\n                  const [, login, duration, ...reason] = line.split(/\\s+/);\r\n                  if (!timeouts.find((x) => x.login === login.toLowerCase())) {\r\n                    timeouts.push({ login: login.toLowerCase(), duration: duration, reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)ban\\s\\w+(\\s.+)?/i) !== null: {\r\n                  const [, login, ...reason] = line.split(/\\s+/);\r\n                  if (!bans.find((x) => x.login === login.toLowerCase())) {\r\n                    bans.push({ login: login.toLowerCase(), reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)unban\\s\\w+/i) !== null || line.match(/^(\\.|\\/)untimeout\\s\\w+/i) !== null: {\r\n                  const [, login] = line.split(/\\s+/);\r\n                  if (!unbans.find((x) => x.login === login.toLowerCase())) {\r\n                    unbans.push({ login: login.toLowerCase() });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)timeoutid\\s\\w+\\s(\\d+)(\\s.+)?/i) !== null: {\r\n                  const [, id, duration, ...reason] = line.split(/\\s+/);\r\n                  if (!timeouts_id.find((x) => x.id === id)) {\r\n                    timeouts_id.push({ id: id, duration: duration, reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)banid\\s\\w+(\\s.+)?/i) !== null: {\r\n                  const [, id, ...reason] = line.split(/\\s+/);\r\n                  if (!bans_id.find((x) => x.id === id)) {\r\n                    bans_id.push({ id: id, reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)unbanid\\s\\w+/i) !== null || line.match(/^(\\.|\\/)untimeoutid\\s\\w+/i) !== null: {\r\n                  const [, id] = line.split(/\\s+/);\r\n                  if (!unbans_id.find((x) => x.id === id)) {\r\n                    unbans_id.push({ id: id });\r\n                  }\r\n                  break;\r\n                }\r\n                default: {\r\n                  messages.push({ message: line });\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            case 1: {\r\n              const [login] = line.split(/\\s+/);\r\n              if (!unbans.find((x) => x.login === login.toLowerCase())) {\r\n                unbans.push({ login: login.toLowerCase() });\r\n              }\r\n              break;\r\n            }\r\n            case 2: {\r\n              const [login, ...reason] = line.split(/\\s+/);\r\n              if (!bans.find((x) => x.login === login.toLowerCase())) {\r\n                bans.push({\r\n                  login: login.toLowerCase(),\r\n                  reason: reason ? reason.join(' ') : `Ban-list`\r\n                });\r\n              }\r\n              break;\r\n            }\r\n            case 3: {\r\n              const [id] = line.split(/\\s+/);\r\n              if (!unbans.find((x) => x.id === id)) {\r\n                unbans_id.push({ id: id });\r\n              }\r\n              break;\r\n            }\r\n            case 4: {\r\n              const [id, ...reason] = line.split(/\\s+/);\r\n              if (!bans.find((x) => x.id === id)) {\r\n                bans_id.push({ id: id, reason: reason ? reason.join(' ') : `Ban-list` });\r\n              }\r\n              break;\r\n            }\r\n            default: {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log('Bans', bans, bans.length);\r\n      console.log('Unbans', unbans, unbans.length);\r\n      console.log('Bans (ID)', bans_id, bans_id.length);\r\n      console.log('Unbans (ID)', unbans_id, unbans_id.length);\r\n      console.log('Timeouts', timeouts, timeouts.length);\r\n      console.log('Timeouts (ID)', timeouts_id, timeouts_id.length);\r\n      console.log('Messages', messages, messages.length);\r\n\r\n      for (let i = 0; i < chipData.length; i++) {\r\n        const channelData = chipData[i];\r\n        await Promise.all([\r\n          banUser(channelData.id, bans),\r\n          unbanUser(channelData.id, unbans),\r\n          banUser_id(channelData.id, bans_id),\r\n          unbanUser_id(channelData.id, unbans_id),\r\n          timeoutUser(channelData.id, timeouts),\r\n          timeoutUser_id(channelData.id, timeouts_id)\r\n        ]);\r\n\r\n        const nick = await getName(JSON.parse(localStorage.getItem('login')).userId);\r\n\r\n        if (messages.length) {\r\n          const ws = new WebSocket('wss://irc-ws.chat.twitch.tv');\r\n\r\n          ws.onopen = async () => {\r\n            ws.send('CAP REQ :twitch.tv/membership twitch.tv/tags twitch.tv/commands');\r\n            ws.send('PASS oauth:' + JSON.parse(localStorage.getItem('login')).token);\r\n            ws.send('NICK ' + nick);\r\n\r\n            for (let i = 0; i < messages.length; i++) {\r\n              const message = messages[i].message;\r\n              ws.send(`PRIVMSG #${channelData.name} :${message}`);\r\n              await new Promise((x) => setTimeout(x, sliderValue));\r\n\r\n              if (i === messages.length - 1) {\r\n                ws.close();\r\n              }\r\n            }\r\n          };\r\n        }\r\n\r\n        await new Promise((x) => setTimeout(x, 500));\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      setOutputData(null);\r\n      setOutputError(err.message);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const addCrossbanChannel = async () => {\r\n    if (channel.trim() === '') {\r\n      setOutputData(null);\r\n      setOutputError('You must specify a Crossban channel');\r\n      return;\r\n    }\r\n\r\n    const channels = localStorage.getItem('crossbanChannels') ? JSON.parse(localStorage.getItem('crossbanChannels')) : [];\r\n\r\n    if (channels.find((i) => i.id === channel.split(' ')[3])) {\r\n      setOutputData(null);\r\n      setOutputError(`${channel} is already in Crossban list.`);\r\n      return;\r\n    }\r\n\r\n    channels.push({\r\n      id: channel.split(' ')[3]\r\n    });\r\n\r\n    localStorage.setItem('crossbanChannels', JSON.stringify(channels));\r\n\r\n    const data = await getNames([\r\n      {\r\n        id: channel.split(' ')[3]\r\n      }\r\n    ]);\r\n\r\n    const newChipData = [...chipData, { id: channel.split(' ')[3], name: data[0].name, pfp: data[0].pfp }];\r\n\r\n    setChipData(newChipData);\r\n\r\n    setOutputData(`Successfully added ${channel} as Crossban channel.`);\r\n    setOutputError(null);\r\n  };\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    setSliderValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Crossban\" description=\"Ban/timeout multiple users in multiple channels.\">\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item xs={10}>\r\n          <Autocomplete\r\n            options={searchResults}\r\n            onChange={(event, value) => {\r\n              setChannel(value);\r\n            }}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                fullWidth\r\n                id=\"standard-basic\"\r\n                label=\"Add Channel\"\r\n                variant=\"filled\"\r\n                onChange={(event) => {\r\n                  handleSearchChange(event.target.value);\r\n                }}\r\n              />\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Button variant=\"contained\" fullWidth onClick={addCrossbanChannel}>\r\n            Add Crossban Channel\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Paper\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              flexWrap: 'wrap',\r\n              listStyle: 'none',\r\n              p: 0.5,\r\n              m: 0\r\n            }}\r\n            component=\"ul\"\r\n          >\r\n            {chipData.map((i) => {\r\n              return (\r\n                <ListItem key={i.id}>\r\n                  <Chip avatar={<Avatar alt=\"xd\" src={i.pfp} />} label={`${i.name} - ID: ${i.id}`} onDelete={() => handleDelete(i)} />\r\n                </ListItem>\r\n              );\r\n            })}\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <FormControl fullWidth variant=\"filled\">\r\n            <InputLabel id=\"type-label\">Type</InputLabel>\r\n            <Select value={selectedType} onChange={(e) => setSelectedType(e.target.value)} labelId=\"type-label\" id=\"type-select\">\r\n              <MenuItem value=\"filesay\">Filesay</MenuItem>\r\n              <MenuItem value=\"ban-list-name\">Ban List (Name)</MenuItem>\r\n              <MenuItem value=\"unban-list-name\">Unban List (Name)</MenuItem>\r\n              <MenuItem value=\"ban-list-id\">Ban List (ID)</MenuItem>\r\n              <MenuItem value=\"unban-list-id\">Unban List (ID)</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={10}\r\n            id=\"standard-basic\"\r\n            label=\"Text\"\r\n            variant=\"filled\"\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} style={{ textAlign: 'right' }}>\r\n          Lines: {message.split('\\n').length}\r\n        </Grid>\r\n        <ThemeProvider theme={darkTheme}>\r\n          <Grid item xs={12}>\r\n            <Typography gutterBottom>Output delay</Typography>\r\n            <FormControl fullWidth variant=\"filled\">\r\n              <Slider\r\n                aria-label=\"Delay\"\r\n                value={sliderValue}\r\n                onChange={handleSliderChange}\r\n                getAriaValueText={valuetext}\r\n                step={null}\r\n                valueLabelDisplay=\"auto\"\r\n                marks={marks}\r\n                min={marks[0].value}\r\n                max={marks[marks.length - 1].value}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n        </ThemeProvider>\r\n        <Grid item xs={12}>\r\n          <Button variant=\"contained\" fullWidth onClick={handleClick}>\r\n            Send\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {outputError && (\r\n            <Typography variant=\"body2\" style={{ color: 'red', marginTop: '10px', textAlign: 'center' }}>\r\n              {outputError}\r\n            </Typography>\r\n          )}\r\n          {outputData && (\r\n            <Typography variant=\"body2\" style={{ marginTop: '10px', textAlign: 'center' }}>\r\n              {outputData}\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["darkTheme","createTheme","palette","mode","ListItem","styled","_ref","theme","margin","spacing","marks","value","label","valuetext","async","getName","id","response","fetch","encodeURIComponent","responseType","throwHttpErrors","headers","data","json","ok","Error","message","error","statusText","login","getNames","url","channels","map","channel","join","user","name","pfp","profile_image_url","chunkArray","array","size","result","i","length","chunk","slice","push","Page","setMessage","useState","outputData","setOutputData","outputError","setOutputError","selectedType","setSelectedType","setChannel","sliderValue","setSliderValue","searchResults","setSearchResults","chipData","setChipData","banUser","channelID","users","Promise","all","status","forEach","existingUser","find","u","JSON","parse","localStorage","getItem","userId","method","Authorization","token","clientID","body","stringify","user_id","reason","x","setTimeout","console","log","timeoutUser","duration","Number","banUser_id","timeoutUser_id","unbanUser","unbanUser_id","useEffect","document","title","storedChannels","parsedChannels","names","fetchData","_jsx","MainCard","description","children","_jsxs","Grid","container","alignItems","item","xs","Autocomplete","options","onChange","event","renderInput","params","TextField","fullWidth","variant","trim","RegExp","test","display_name","broadcaster_login","handleSearchChange","target","Button","onClick","split","setItem","newChipData","Paper","sx","display","justifyContent","flexWrap","listStyle","p","m","component","Chip","avatar","Avatar","alt","src","onDelete","handleDelete","chipToDelete","filter","chip","chips","FormControl","InputLabel","Select","e","labelId","MenuItem","multiline","rows","style","textAlign","ThemeProvider","Typography","gutterBottom","Slider","handleSliderChange","newValue","getAriaValueText","step","valueLabelDisplay","min","max","text","type","messages","timeouts","timeouts_id","unbans","bans","unbans_id","bans_id","line","match","toLowerCase","channelData","nick","ws","WebSocket","onopen","send","close","err","color","marginTop"],"sourceRoot":""}