{"version":3,"file":"static/js/393.3183453a.chunk.js","mappings":"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","sources":["views/twitch/channel-manager/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Typography, TextField, Button, Grid, MenuItem, Select, FormControl, InputLabel, Autocomplete } from '@mui/material';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\nconst Page = () => {\r\n  const [token, setToken] = useState('');\r\n\r\n  const [outputError, setOutputError] = useState('');\r\n  const [outputData, setOutputData] = useState('');\r\n\r\n  const [menuItems, setMenuItems] = useState([]);\r\n  const [selectedChannel, setSelectedChannel] = useState('');\r\n  const [selectedType, setSelectedType] = useState('');\r\n  const [additionalElement, setAdditionalElement] = useState(null);\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [selectedUser, setSelectedUser] = useState('');\r\n\r\n  useEffect(() => {\r\n    document.title = `LsCo Software - Channel Manager`;\r\n  }, []);\r\n\r\n  const addToken = async () => {\r\n    if (token.trim() === '') {\r\n      setOutputError('You must specify an OAuth Token');\r\n      setOutputData('');\r\n      return;\r\n    } else {\r\n      try {\r\n        const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n        const validate = await validateToken(token.replace(/^oauth[:]*/i, ''));\r\n\r\n        if (tokens.find((xyz) => xyz.id === validate.user_id.toLowerCase())) {\r\n          setOutputError('The channel already exists');\r\n          setOutputData('');\r\n          return;\r\n        }\r\n\r\n        tokens.push({\r\n          id: validate.user_id,\r\n          login: validate.login,\r\n          access_token: token.replace(/^oauth[:]*/i, ''),\r\n          client_id: validate.client_id\r\n        });\r\n\r\n        localStorage.setItem('tokens', JSON.stringify(tokens));\r\n\r\n        updateChannels();\r\n\r\n        setOutputData('');\r\n        setOutputData(`Successfully added login: ${validate.login} - ID: ${validate.user_id}`);\r\n        return;\r\n      } catch (err) {\r\n        setOutputError(err.message);\r\n        setOutputData('');\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateChannels = () => {\r\n    const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n    const options = tokens.map(({ login, id }) => ({\r\n      value: id,\r\n      label: `${login} - ID: ${id}`\r\n    }));\r\n\r\n    if (options.length >= 1) {\r\n      setMenuItems(options);\r\n    } else {\r\n      setMenuItems([{ value: '', label: 'No Channels' }]);\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = async (value) => {\r\n    if (value.trim() !== '') {\r\n      const response = await fetch(`https://api.twitch.tv/helix/search/channels?query=${value}`, {\r\n        headers: {\r\n          'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setSearchResults(data.data.map((channel) => `${channel.display_name} - ID: ${channel.id}`));\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } else {\r\n      setSearchResults([]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateChannels();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOutputError('');\r\n    setOutputData('');\r\n\r\n    const getMods = async () => {\r\n      if (!selectedChannel) {\r\n        setOutputError('No channel specified');\r\n        setOutputData('');\r\n        return [];\r\n      }\r\n\r\n      const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n      const index = tokens.findIndex((x) => x.id === selectedChannel);\r\n\r\n      let url = `https://api.twitch.tv/helix/moderation/moderators?first=100&broadcaster_id=${tokens[index].id}`;\r\n      let cursor = null;\r\n      let moderators = [];\r\n\r\n      for (;;) {\r\n        if (cursor) {\r\n          url = `https://api.twitch.tv/helix/moderation/moderators?first=100&broadcaster_id=${tokens[index].id}&after=${cursor}`;\r\n        }\r\n\r\n        const response = await fetch(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${tokens[index].access_token}`,\r\n            'Client-Id': tokens[index].client_id\r\n          }\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) {\r\n          return [];\r\n        }\r\n\r\n        moderators.push(...data.data.map((i) => `${i.user_name} - ID: ${i.user_id}`));\r\n\r\n        if (data.pagination && data.pagination.cursor) {\r\n          cursor = data.pagination.cursor;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      return moderators;\r\n    };\r\n\r\n    const getVips = async () => {\r\n      if (!selectedChannel) {\r\n        setOutputError('No channel specified');\r\n        setOutputData('');\r\n        return [];\r\n      }\r\n\r\n      const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n      const index = tokens.findIndex((x) => x.id === selectedChannel);\r\n\r\n      let url = `https://api.twitch.tv/helix/channels/vips?first=100&broadcaster_id=${tokens[index].id}`;\r\n      let cursor = null;\r\n      let vips = [];\r\n\r\n      for (;;) {\r\n        if (cursor) {\r\n          url = `https://api.twitch.tv/helix/channels/vips?first=100&broadcaster_id=${tokens[index].id}&after=${cursor}`;\r\n        }\r\n\r\n        const response = await fetch(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${tokens[index].access_token}`,\r\n            'Client-Id': tokens[index].client_id\r\n          }\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) {\r\n          return [];\r\n        }\r\n\r\n        vips.push(...data.data.map((i) => `${i.user_name} - ID: ${i.user_id}`));\r\n\r\n        if (data.pagination && data.pagination.cursor) {\r\n          cursor = data.pagination.cursor;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      return vips;\r\n    };\r\n\r\n    const removeVip = async () => {\r\n      if (!selectedChannel) {\r\n        setOutputError('No channel specified');\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n      const index = tokens.findIndex((x) => x.id === selectedChannel);\r\n\r\n      const request = await fetch(\r\n        `https://api.twitch.tv/helix/channels/vips?broadcaster_id=${tokens[index].id}&user_id=${selectedUser.split('- ID: ')[1]}`,\r\n        {\r\n          method: 'DELETE',\r\n          headers: {\r\n            Authorization: `Bearer ${tokens[index].access_token}`,\r\n            'Client-Id': tokens[index].client_id\r\n          }\r\n        }\r\n      );\r\n\r\n      if (!request.ok) {\r\n        const data = await request.json();\r\n\r\n        setOutputError(data.message);\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      setOutputData('');\r\n      setOutputData(`Successfully removed ${selectedUser.split('- ID: ')[0]} as VIP in ${tokens[index].login}`);\r\n      return;\r\n    };\r\n\r\n    const removeMod = async () => {\r\n      if (!selectedChannel) {\r\n        setOutputError('No channel specified');\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n      const index = tokens.findIndex((x) => x.id === selectedChannel);\r\n\r\n      const request = await fetch(\r\n        `https://api.twitch.tv/helix/moderation/moderators?broadcaster_id=${tokens[index].id}&user_id=${selectedUser.split('- ID: ')[1]}`,\r\n        {\r\n          method: 'DELETE',\r\n          headers: {\r\n            Authorization: `Bearer ${tokens[index].access_token}`,\r\n            'Client-Id': tokens[index].client_id\r\n          }\r\n        }\r\n      );\r\n\r\n      if (!request.ok) {\r\n        const data = await request.json();\r\n\r\n        setOutputError(data.message);\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      setOutputData('');\r\n      setOutputData(`Successfully removed ${selectedUser.split('- ID: ')[0]} as Moderator in ${tokens[index].login}`);\r\n      return;\r\n    };\r\n\r\n    const addVip = async () => {\r\n      if (!selectedChannel) {\r\n        setOutputError('No channel specified');\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n      const index = tokens.findIndex((x) => x.id === selectedChannel);\r\n\r\n      const request = await fetch(\r\n        `https://api.twitch.tv/helix/channels/vips?broadcaster_id=${tokens[index].id}&user_id=${selectedUser.split('- ID: ')[1]}`,\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            Authorization: `Bearer ${tokens[index].access_token}`,\r\n            'Client-Id': tokens[index].client_id\r\n          }\r\n        }\r\n      );\r\n\r\n      if (!request.ok) {\r\n        const data = await request.json();\r\n\r\n        setOutputError(data.message);\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      setOutputData('');\r\n      setOutputData(`Successfully added ${selectedUser.split('- ID: ')[0]} as VIP in ${tokens[index].login}`);\r\n      return;\r\n    };\r\n\r\n    const addMod = async () => {\r\n      if (!selectedChannel) {\r\n        setOutputError('No channel specified');\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n      const index = tokens.findIndex((x) => x.id === selectedChannel);\r\n\r\n      const request = await fetch(\r\n        `https://api.twitch.tv/helix/moderation/moderators?broadcaster_id=${tokens[index].id}&user_id=${selectedUser.split('- ID: ')[1]}`,\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            Authorization: `Bearer ${tokens[index].access_token}`,\r\n            'Client-Id': tokens[index].client_id\r\n          }\r\n        }\r\n      );\r\n\r\n      if (!request.ok) {\r\n        const data = await request.json();\r\n\r\n        setOutputError(data.message);\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      setOutputData('');\r\n      setOutputData(`Successfully added ${selectedUser.split('- ID: ')[0]} as Moderator in ${tokens[index].login}`);\r\n      return;\r\n    };\r\n\r\n    const fetchData = async () => {\r\n      if (selectedType === 'add-moderator') {\r\n        setAdditionalElement(\r\n          <React.Fragment>\r\n            <Grid item xs={12}>\r\n              <Autocomplete\r\n                options={searchResults}\r\n                onChange={(event, value) => {\r\n                  setSelectedUser(value);\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    fullWidth\r\n                    id=\"standard-basic\"\r\n                    label=\"User\"\r\n                    variant=\"filled\"\r\n                    onChange={(event) => {\r\n                      handleSearchChange(event.target.value);\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button variant=\"contained\" fullWidth onClick={addMod}>\r\n                Add\r\n              </Button>\r\n            </Grid>\r\n          </React.Fragment>\r\n        );\r\n      } else if (selectedType === 'add-vip') {\r\n        setAdditionalElement(\r\n          <React.Fragment>\r\n            <Grid item xs={12}>\r\n              <Autocomplete\r\n                options={searchResults}\r\n                onChange={(event, value) => {\r\n                  setSelectedUser(value);\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    fullWidth\r\n                    id=\"standard-basic\"\r\n                    label=\"User\"\r\n                    variant=\"filled\"\r\n                    onChange={(event) => {\r\n                      handleSearchChange(event.target.value);\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button variant=\"contained\" fullWidth onClick={addVip}>\r\n                Add\r\n              </Button>\r\n            </Grid>\r\n          </React.Fragment>\r\n        );\r\n      } else if (selectedType === 'remove-moderator') {\r\n        const mods = await getMods();\r\n\r\n        const props = {\r\n          options: mods\r\n        };\r\n\r\n        setAdditionalElement(\r\n          <React.Fragment>\r\n            <Grid item xs={12}>\r\n              <Autocomplete\r\n                {...props}\r\n                id=\"disable-close-on-select\"\r\n                onChange={(event, value) => {\r\n                  setSelectedUser(value);\r\n                }}\r\n                renderInput={(params) => <TextField {...params} label=\"Moderator\" variant=\"filled\" />}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button variant=\"contained\" fullWidth onClick={removeMod}>\r\n                Remove\r\n              </Button>\r\n            </Grid>\r\n          </React.Fragment>\r\n        );\r\n      } else if (selectedType === 'remove-vip') {\r\n        const vips = await getVips();\r\n\r\n        const props = {\r\n          options: vips\r\n        };\r\n\r\n        setAdditionalElement(\r\n          <React.Fragment>\r\n            <Grid item xs={12}>\r\n              <Autocomplete\r\n                {...props}\r\n                id=\"disable-close-on-select\"\r\n                onChange={(event, value) => {\r\n                  setSelectedUser(value);\r\n                }}\r\n                renderInput={(params) => <TextField {...params} label=\"VIP\" variant=\"filled\" />}\r\n              />{' '}\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button variant=\"contained\" fullWidth onClick={removeVip}>\r\n                Remove\r\n              </Button>\r\n            </Grid>\r\n          </React.Fragment>\r\n        );\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [selectedType, searchResults, selectedChannel, selectedUser]);\r\n\r\n  const removeToken = async () => {\r\n    if (!selectedChannel) {\r\n      setOutputError('No channel specified');\r\n      setOutputData('');\r\n      return;\r\n    } else {\r\n      try {\r\n        const tokens = localStorage.getItem('tokens') ? JSON.parse(localStorage.getItem('tokens')) : [];\r\n\r\n        const index = tokens.findIndex((x) => x.id === selectedChannel);\r\n\r\n        if (index === -1) {\r\n          setOutputError('There are no channels');\r\n          setOutputData('');\r\n          return;\r\n        }\r\n\r\n        const data = tokens[index];\r\n\r\n        tokens.splice(index, 1);\r\n        localStorage.setItem('tokens', JSON.stringify(tokens));\r\n\r\n        updateChannels();\r\n\r\n        setOutputData('');\r\n        setOutputData(`Successfully removed login: ${data.login} - ID: ${data.id}`);\r\n        return;\r\n      } catch (err) {\r\n        setOutputError(err.message);\r\n        setOutputData('');\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const validateToken = async (token) => {\r\n    const validateResponse = await fetch('https://id.twitch.tv/oauth2/validate', {\r\n      headers: {\r\n        Authorization: `OAuth ${token}`\r\n      }\r\n    });\r\n\r\n    const validateData = await validateResponse.json();\r\n\r\n    if (!validateResponse.ok) {\r\n      switch (validateData.message) {\r\n        case 'invalid access token':\r\n          throw new Error('Invalid access token');\r\n        default:\r\n          throw new Error(validateData.message || 'Validate token failed');\r\n      }\r\n    }\r\n\r\n    return validateData;\r\n  };\r\n\r\n  const openTokenGenerator = async () => {\r\n    const type = 'token';\r\n    const clientID = '87q7zikx7uny69x0wkxtf8bm4kd5m2';\r\n    const redirectURI = window.location.origin ?? 'https://devlsco.github.io/';\r\n    window.open(\r\n      `https://id.twitch.tv/oauth2/authorize?response_type=${type}&client_id=${clientID}&redirect_uri=${redirectURI}&scope=channel:manage:vips+channel:manage:moderators&force_verify=true`,\r\n      '_self'\r\n    );\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Channel Manager\" description=\"Add or remove moderators/VIPs from a specific channel.\">\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            id=\"standard-basic\"\r\n            label=\"OAuth Token\"\r\n            type=\"password\"\r\n            value={token}\r\n            variant=\"filled\"\r\n            onChange={(e) => setToken(e.target.value)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Button variant=\"contained\" style={{ background: '#2196f3' }} fullWidth onClick={addToken}>\r\n            Add\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Button variant=\"contained\" style={{ background: '#ff0000' }} fullWidth onClick={removeToken}>\r\n            Remove\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button\r\n            variant=\"contained\"\r\n            style={{ background: 'hsla(0, 0%, 40%, .3)', border: '1px solid #2196f3' }}\r\n            fullWidth\r\n            onClick={openTokenGenerator}\r\n          >\r\n            Generate OAuth Token\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <FormControl fullWidth variant=\"filled\">\r\n            <InputLabel id=\"channel-label\">Channel</InputLabel>\r\n            <Select\r\n              value={selectedChannel}\r\n              onChange={(e) => setSelectedChannel(e.target.value)}\r\n              labelId=\"channel-label\"\r\n              id=\"channel-select\"\r\n            >\r\n              {menuItems.map((menuItem, index) => (\r\n                <MenuItem key={menuItem.value} value={menuItem.value} selected={index === 1}>\r\n                  {menuItem.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <FormControl fullWidth variant=\"filled\">\r\n            <InputLabel id=\"type-label\">Type</InputLabel>\r\n            <Select value={selectedType} onChange={(e) => setSelectedType(e.target.value)} labelId=\"type-label\" id=\"type-select\">\r\n              <MenuItem value=\"add-moderator\">Add Moderator</MenuItem>\r\n              <MenuItem value=\"add-vip\">Add VIP</MenuItem>\r\n              <MenuItem value=\"remove-moderator\">Remove Moderator</MenuItem>\r\n              <MenuItem value=\"remove-vip\">Remove VIP</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        {additionalElement}\r\n        <Grid item xs={12}>\r\n          {outputError && (\r\n            <Typography variant=\"body2\" style={{ color: 'red', marginTop: '10px', textAlign: 'center' }}>\r\n              {outputError}\r\n            </Typography>\r\n          )}\r\n          {outputData && (\r\n            <Typography variant=\"body2\" style={{ marginTop: '10px', textAlign: 'center' }}>\r\n              {outputData}\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["Page","token","setToken","useState","outputError","setOutputError","outputData","setOutputData","menuItems","setMenuItems","selectedChannel","setSelectedChannel","selectedType","setSelectedType","additionalElement","setAdditionalElement","searchResults","setSearchResults","selectedUser","setSelectedUser","useEffect","document","title","updateChannels","options","JSON","parse","localStorage","getItem","map","_ref","login","id","value","label","length","handleSearchChange","async","trim","response","fetch","headers","data","json","ok","channel","display_name","removeVip","tokens","index","findIndex","x","request","split","method","Authorization","access_token","client_id","message","removeMod","addVip","addMod","_jsxs","React","children","_jsx","Grid","item","xs","Autocomplete","onChange","event","renderInput","params","TextField","fullWidth","variant","target","Button","onClick","props","url","cursor","moderators","push","i","user_name","user_id","pagination","getMods","vips","getVips","fetchData","validateToken","validateResponse","validateData","Error","MainCard","description","container","spacing","alignItems","type","e","style","background","validate","replace","find","xyz","toLowerCase","setItem","stringify","err","splice","border","_window$location$orig","redirectURI","window","location","origin","open","FormControl","InputLabel","Select","labelId","menuItem","MenuItem","selected","Typography","color","marginTop","textAlign"],"sourceRoot":""}