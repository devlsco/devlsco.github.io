{"version":3,"file":"static/js/436.2bde8e4b.chunk.js","mappings":"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","sources":["views/dashboard/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Grid, Autocomplete, Button, TextField, Avatar, Box, Snackbar } from '@mui/material';\r\nimport MuiAlert from '@mui/material/Alert';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nconst Page = () => {\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [game, setGame] = useState({ name: '', id: null, avatarUrl: '' });\r\n  const [title, setTitle] = useState('');\r\n  const [openError, setOpenError] = useState(false);\r\n  const [openSuccess, setOpenSuccess] = useState(false);\r\n  const [errorReason, setErrorReason] = useState('');\r\n  const [successReason, setSuccessReason] = useState('');\r\n\r\n  useEffect(() => {\r\n    document.title = 'LsCo Software - Dashboard';\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const loginData = JSON.parse(localStorage.getItem('login'));\r\n      const isLoggedIn = localStorage.getItem('login') !== null;\r\n\r\n      if (isLoggedIn) {\r\n        try {\r\n          const responseA = await fetch(`https://api.twitch.tv/helix/channels?broadcaster_id=${loginData.id}`, {\r\n            headers: {\r\n              'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n            }\r\n          });\r\n\r\n          const dataA = await responseA.json();\r\n\r\n          if (responseA.ok && dataA.data.length > 0) {\r\n            const channelData = dataA.data[0];\r\n            setGame({\r\n              name: channelData.game_name.length ? channelData.game_name : 'None',\r\n              id: channelData.game_id.length ? channelData.game_id : 0,\r\n              avatarUrl: ''\r\n            });\r\n            setTitle(channelData.title);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const showError = () => {\r\n    setOpenError(true);\r\n  };\r\n\r\n  const closeError = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpenError(false);\r\n  };\r\n\r\n  const showSuccess = () => {\r\n    setOpenSuccess(true);\r\n  };\r\n\r\n  const closeSuccess = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpenSuccess(false);\r\n  };\r\n\r\n  const updateProperties = async () => {\r\n    const loginData = JSON.parse(localStorage.getItem('login'));\r\n    if (!loginData) {\r\n      setErrorReason('Log in to update your title & game.');\r\n      showError();\r\n      return;\r\n    }\r\n    const broadcasterId = decodeURIComponent(loginData.id);\r\n\r\n    try {\r\n      const response = await fetch(`https://api.twitch.tv/helix/channels?broadcaster_id=${broadcasterId}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          Authorization: 'Bearer ' + loginData.access_token,\r\n          'Client-ID': loginData.client_id,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          game_id: game.id ?? 0,\r\n          title: title.length ? title : ' '\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const data = await response.json();\r\n        setErrorReason(data.message);\r\n        showError();\r\n      } else {\r\n        setSuccessReason('Successfully updated your title & game.');\r\n        showSuccess();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = async (value) => {\r\n    if (value.trim() !== '') {\r\n      const response = await fetch(`https://api.twitch.tv/helix/search/categories?query=${decodeURIComponent(value)}&first=15`, {\r\n        headers: {\r\n          'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setSearchResults(\r\n          data.data.map((category) => ({\r\n            name: category.name,\r\n            id: category.id,\r\n            avatarUrl: category.box_art_url.replace('52x72', '30x40')\r\n          }))\r\n        );\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } else {\r\n      setSearchResults([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Dashboard\" description=\"Update your game or stream title.\">\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            fullWidth\r\n            id=\"standard-basic\"\r\n            label=\"Title\"\r\n            variant=\"filled\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            autoFocus\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <Autocomplete\r\n            value={game}\r\n            options={searchResults}\r\n            getOptionLabel={(option) => {\r\n              return option.name;\r\n            }}\r\n            onChange={(event, value) => {\r\n              setGame(value ?? { name: '', id: null, avatarUrl: '' });\r\n            }}\r\n            isOptionEqualToValue={(option, value) => option.id === value.id}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                fullWidth\r\n                id=\"standard-basic\"\r\n                label=\"Game\"\r\n                variant=\"filled\"\r\n                onChange={(event) => {\r\n                  handleSearchChange(event.target.value);\r\n                }}\r\n              />\r\n            )}\r\n            renderOption={(props, option) => (\r\n              <li {...props}>\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  <Avatar variant=\"square\" src={option.avatarUrl} alt={option.name} sx={{ width: 30, height: 40, marginRight: 1 }} />\r\n                  {option.name}\r\n                </Box>\r\n              </li>\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <Button variant=\"outlined\" fullWidth onClick={updateProperties}>\r\n            Update\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Snackbar open={openError} autoHideDuration={2500} onClose={closeError}>\r\n        <Alert onClose={closeError} severity=\"error\" sx={{ width: '100%' }}>\r\n          {errorReason}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      <Snackbar open={openSuccess} autoHideDuration={1500} onClose={closeSuccess}>\r\n        <Alert onClose={closeSuccess} severity=\"success\" sx={{ width: '100%' }}>\r\n          {successReason}\r\n        </Alert>\r\n      </Snackbar>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["Alert","React","props","ref","_jsx","MuiAlert","elevation","variant","Page","searchResults","setSearchResults","useState","game","setGame","name","id","avatarUrl","title","setTitle","openError","setOpenError","openSuccess","setOpenSuccess","errorReason","setErrorReason","successReason","setSuccessReason","useEffect","document","async","loginData","JSON","parse","localStorage","getItem","responseA","fetch","headers","dataA","json","ok","data","length","channelData","game_name","game_id","error","console","fetchData","showError","closeError","event","reason","closeSuccess","_jsxs","MainCard","description","children","Grid","container","spacing","item","xs","sm","TextField","fullWidth","label","value","onChange","e","target","autoFocus","Autocomplete","options","getOptionLabel","option","isOptionEqualToValue","renderInput","params","trim","response","decodeURIComponent","map","category","box_art_url","replace","handleSearchChange","renderOption","Box","display","alignItems","Avatar","src","alt","sx","width","height","marginRight","Button","onClick","broadcasterId","_game$id","method","Authorization","access_token","client_id","body","stringify","message","Snackbar","open","autoHideDuration","onClose","severity"],"sourceRoot":""}