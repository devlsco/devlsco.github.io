{"version":3,"file":"static/js/436.43d6d4a7.chunk.js","mappings":"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","sources":["views/dashboard/index.js"],"sourcesContent":["import humanizeDuration from 'humanize-duration';\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport { Grid, Autocomplete, Button, TextField, Avatar, Box, Snackbar, Link, Typography } from '@mui/material';\r\nimport MuiAlert from '@mui/material/Alert';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.number.isRequired,\r\n  value: PropTypes.number.isRequired\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`\r\n  };\r\n}\r\n\r\nasync function getChannel(id) {\r\n  const response = await fetch(`https://api.twitch.tv/helix/users?id=${encodeURIComponent(id)}`, {\r\n    responseType: 'json',\r\n    throwHttpErrors: false,\r\n    headers: {\r\n      'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n    }\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message ? `${data.error}, ${data.message}` : response.statusText);\r\n  }\r\n\r\n  if (!data.data[0]) {\r\n    throw new Error('Channel not found.');\r\n  }\r\n\r\n  return data.data[0];\r\n}\r\n\r\nfunction humanizeLong(ms) {\r\n  return humanizeDuration(Date.now() - ms, {\r\n    units: ['y', 'mo', 'd', 'h', 'm', 's'],\r\n    largest: 4,\r\n    round: true,\r\n    spacer: ' ',\r\n    conjunction: ' and ',\r\n    serialComma: false,\r\n    zero: '0'\r\n  });\r\n}\r\n\r\nconst Page = () => {\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [searchResultsUser, setSearchResultsUser] = useState([]);\r\n  const [game, setGame] = useState({ name: '', id: null, avatarUrl: '' });\r\n  const [title, setTitle] = useState('');\r\n  const [openError, setOpenError] = useState(false);\r\n  const [openSuccess, setOpenSuccess] = useState(false);\r\n  const [errorReason, setErrorReason] = useState('');\r\n  const [successReason, setSuccessReason] = useState('');\r\n  const [channel, setChannel] = useState(null);\r\n\r\n  const [outputData, setOutputData] = useState(null);\r\n  const [outputError, setOutputError] = useState(null);\r\n\r\n  const [value, setValue] = useState(0);\r\n\r\n  const inputTimerRef = useRef(null);\r\n\r\n  const handleSearchChangeID = async (value) => {\r\n    clearTimeout(inputTimerRef.current);\r\n\r\n    if (value.trim() !== '') {\r\n      inputTimerRef.current = setTimeout(async () => {\r\n        const fetchData = async () => {\r\n          try {\r\n            const data = await getChannel(value);\r\n            setOutputError(null);\r\n            setOutputData(data);\r\n          } catch (err) {\r\n            setOutputError(err.message);\r\n            setOutputData(null);\r\n          }\r\n        };\r\n        fetchData();\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.title = 'LsCo Software - Dashboard';\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!channel) return;\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await getChannel(channel.name.split(' ')[3]);\r\n        setOutputError(null);\r\n        setOutputData(data);\r\n      } catch (err) {\r\n        setOutputError(err.message);\r\n        setOutputData(null);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [channel]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const loginData = JSON.parse(localStorage.getItem('login'));\r\n      const isLoggedIn = localStorage.getItem('login') !== null;\r\n\r\n      if (isLoggedIn) {\r\n        try {\r\n          const responseA = await fetch(`https://api.twitch.tv/helix/channels?broadcaster_id=${loginData.id}`, {\r\n            headers: {\r\n              'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n            }\r\n          });\r\n\r\n          const dataA = await responseA.json();\r\n\r\n          if (responseA.ok && dataA.data.length > 0) {\r\n            const channelData = dataA.data[0];\r\n            setGame({\r\n              name: channelData.game_name.length ? channelData.game_name : 'None',\r\n              id: channelData.game_id.length ? channelData.game_id : 0,\r\n              avatarUrl: ''\r\n            });\r\n            setTitle(channelData.title);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const showError = () => {\r\n    setOpenError(true);\r\n  };\r\n\r\n  const closeError = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpenError(false);\r\n  };\r\n\r\n  const showSuccess = () => {\r\n    setOpenSuccess(true);\r\n  };\r\n\r\n  const closeSuccess = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpenSuccess(false);\r\n  };\r\n\r\n  const updateProperties = async () => {\r\n    const loginData = JSON.parse(localStorage.getItem('login'));\r\n    if (!loginData) {\r\n      setErrorReason('Log in to update your title & game.');\r\n      showError();\r\n      return;\r\n    }\r\n    const broadcasterId = decodeURIComponent(loginData.id);\r\n\r\n    try {\r\n      const response = await fetch(`https://api.twitch.tv/helix/channels?broadcaster_id=${broadcasterId}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          Authorization: 'Bearer ' + loginData.access_token,\r\n          'Client-ID': loginData.client_id,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          game_id: game.id ?? 0,\r\n          title: title.length ? title : ' '\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const data = await response.json();\r\n        setErrorReason(data.message);\r\n        showError();\r\n      } else {\r\n        setSuccessReason('Successfully updated your title & game.');\r\n        showSuccess();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = async (value) => {\r\n    if (value.trim() !== '') {\r\n      const response = await fetch(`https://api.twitch.tv/helix/search/categories?query=${decodeURIComponent(value)}&first=15`, {\r\n        headers: {\r\n          'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setSearchResults(\r\n          data.data.map((category) => ({\r\n            name: category.name,\r\n            id: category.id,\r\n            avatarUrl: category.box_art_url.replace('52x72', '30x40')\r\n          }))\r\n        );\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } else {\r\n      setSearchResults([]);\r\n    }\r\n  };\r\n\r\n  const handleSearchChangeUser = async (value) => {\r\n    if (value.trim() !== '') {\r\n      const response = await fetch(`https://api.twitch.tv/helix/search/channels?query=${value}&first=25`, {\r\n        headers: {\r\n          'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setSearchResultsUser(\r\n          data.data.map((channel) => {\r\n            return {\r\n              name: `${new RegExp('^\\\\w+$').test(channel.display_name) ? channel.display_name : channel.broadcaster_login} - ID: ${\r\n                channel.id\r\n              }`,\r\n              avatarUrl: channel.thumbnail_url.replace('300x300', '50x50')\r\n            };\r\n          })\r\n        );\r\n      } else {\r\n        setSearchResultsUser([]);\r\n      }\r\n    } else {\r\n      setSearchResultsUser([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Dashboard\" description=\"Here you can update the stream or get info about a user.\">\r\n      <Box sx={{ width: '100%' }}>\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n          <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\r\n            <Tab label=\"Stream Dashboard\" {...a11yProps(0)} />\r\n            <Tab label=\"Userinfo\" {...a11yProps(1)} />\r\n          </Tabs>\r\n        </Box>\r\n        <TabPanel value={value} index={0}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                fullWidth\r\n                id=\"standard-basic\"\r\n                label=\"Title\"\r\n                variant=\"filled\"\r\n                value={title}\r\n                onChange={(e) => setTitle(e.target.value)}\r\n                autoFocus\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <Autocomplete\r\n                value={game}\r\n                options={searchResults}\r\n                getOptionLabel={(option) => {\r\n                  return option.name;\r\n                }}\r\n                onChange={(event, value) => {\r\n                  setGame(value ?? { name: '', id: null, avatarUrl: '' });\r\n                }}\r\n                isOptionEqualToValue={(option, value) => option.id === value.id}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    fullWidth\r\n                    id=\"standard-basic\"\r\n                    label=\"Game\"\r\n                    variant=\"filled\"\r\n                    onChange={(event) => {\r\n                      handleSearchChange(event.target.value);\r\n                    }}\r\n                  />\r\n                )}\r\n                renderOption={(props, option) => (\r\n                  <li {...props}>\r\n                    <Box display=\"flex\" alignItems=\"center\">\r\n                      <Avatar variant=\"square\" src={option.avatarUrl} alt={option.name} sx={{ width: 30, height: 40, marginRight: 1 }} />\r\n                      {option.name}\r\n                    </Box>\r\n                  </li>\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <Button variant=\"text\" fullWidth onClick={updateProperties}>\r\n                Update\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </TabPanel>\r\n        <TabPanel value={value} index={1}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <Autocomplete\r\n                options={searchResultsUser}\r\n                getOptionLabel={(option) => option.name}\r\n                onChange={(event, value) => {\r\n                  setChannel(value);\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    fullWidth\r\n                    id=\"standard-basic\"\r\n                    label=\"User information\"\r\n                    variant=\"filled\"\r\n                    onChange={(event) => {\r\n                      handleSearchChangeUser(event.target.value);\r\n                    }}\r\n                  />\r\n                )}\r\n                renderOption={(props, option) => (\r\n                  <li {...props}>\r\n                    <Box display=\"flex\" alignItems=\"center\">\r\n                      <Avatar src={option.avatarUrl} alt={option.name} sx={{ width: 25, height: 25, marginRight: 1 }} />\r\n                      {option.name}\r\n                    </Box>\r\n                  </li>\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                fullWidth\r\n                id=\"standard-basic\"\r\n                label=\"Channel by ID\"\r\n                variant=\"filled\"\r\n                onChange={(event) => {\r\n                  handleSearchChangeID(event.target.value);\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              {outputError && (\r\n                <Typography variant=\"body2\" style={{ color: 'red', marginTop: '10px', textAlign: 'center' }}>\r\n                  {outputError}\r\n                </Typography>\r\n              )}\r\n              {outputData && (\r\n                <Box\r\n                  sx={{\r\n                    backgroundColor: 'rgb(250,250,250,0.1)',\r\n                    borderRadius: '5px',\r\n                    padding: '15px',\r\n                    whiteSpace: 'pre-wrap',\r\n                    maxWidth: '100%',\r\n                    overflowX: 'auto'\r\n                  }}\r\n                >\r\n                  <Typography variant=\"body2\" component=\"pre\">\r\n                    <strong>id:</strong> {outputData.id}\r\n                    <br />\r\n                    <strong>login:</strong> {outputData.login}\r\n                    <br />\r\n                    <strong>display_name:</strong> {outputData.display_name}\r\n                    <br />\r\n                    <strong>type:</strong> {outputData.type === '' ? 'default' : outputData.type}\r\n                    <br />\r\n                    <strong>broadcaster_type:</strong> {outputData.broadcaster_type === '' ? 'default' : outputData.broadcaster_type}\r\n                    <br />\r\n                    <strong>description:</strong> {outputData.description === '' ? 'default' : outputData.description}\r\n                    <br />\r\n                    <strong>profile_image_url:</strong>{' '}\r\n                    {outputData.profile_image_url === '' ? (\r\n                      'default'\r\n                    ) : (\r\n                      <Link target=\"_blank\" href={outputData.profile_image_url}>\r\n                        {outputData.profile_image_url}\r\n                      </Link>\r\n                    )}\r\n                    <br />\r\n                    <strong>offline_image_url:</strong>{' '}\r\n                    {outputData.offline_image_url === '' ? (\r\n                      'default'\r\n                    ) : (\r\n                      <Link target=\"_blank\" href={outputData.offline_image_url}>\r\n                        {outputData.offline_image_url}\r\n                      </Link>\r\n                    )}\r\n                    <br />\r\n                    <strong>created_at:</strong> {outputData.created_at} ({humanizeLong(new Date(outputData.created_at).getTime())} ago)\r\n                  </Typography>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    href={`https://www.twitch.tv/${outputData.login}`}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    style={{ marginTop: '10px' }}\r\n                  >\r\n                    Visit Channel\r\n                  </Button>\r\n                </Box>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </TabPanel>\r\n      </Box>\r\n\r\n      <Snackbar open={openError} autoHideDuration={2500} onClose={closeError}>\r\n        <Alert onClose={closeError} severity=\"error\" sx={{ width: '100%' }}>\r\n          {errorReason}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      <Snackbar open={openSuccess} autoHideDuration={1500} onClose={closeSuccess}>\r\n        <Alert onClose={closeSuccess} severity=\"success\" sx={{ width: '100%' }}>\r\n          {successReason}\r\n        </Alert>\r\n      </Snackbar>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["Alert","React","props","ref","_jsx","MuiAlert","elevation","variant","TabPanel","children","value","index","other","role","hidden","id","Box","sx","p","Typography","a11yProps","async","getChannel","response","fetch","encodeURIComponent","responseType","throwHttpErrors","headers","data","json","ok","Error","message","error","statusText","Page","searchResults","setSearchResults","useState","searchResultsUser","setSearchResultsUser","game","setGame","name","avatarUrl","title","setTitle","openError","setOpenError","openSuccess","setOpenSuccess","errorReason","setErrorReason","successReason","setSuccessReason","channel","setChannel","outputData","setOutputData","outputError","setOutputError","setValue","inputTimerRef","useRef","useEffect","document","split","err","fetchData","loginData","JSON","parse","localStorage","getItem","responseA","dataA","length","channelData","game_name","game_id","console","showError","closeError","event","reason","closeSuccess","_jsxs","MainCard","description","width","borderBottom","borderColor","Tabs","onChange","handleChange","newValue","Tab","label","Grid","container","spacing","item","xs","sm","TextField","fullWidth","e","target","autoFocus","Autocomplete","options","getOptionLabel","option","isOptionEqualToValue","renderInput","params","trim","decodeURIComponent","map","category","box_art_url","replace","handleSearchChange","renderOption","display","alignItems","Avatar","src","alt","height","marginRight","Button","onClick","broadcasterId","_game$id","method","Authorization","access_token","client_id","body","stringify","RegExp","test","display_name","broadcaster_login","thumbnail_url","handleSearchChangeUser","clearTimeout","current","setTimeout","handleSearchChangeID","style","color","marginTop","textAlign","backgroundColor","borderRadius","padding","whiteSpace","maxWidth","overflowX","component","login","type","broadcaster_type","profile_image_url","Link","href","offline_image_url","created_at","ms","Date","getTime","humanizeDuration","now","units","largest","round","spacer","conjunction","serialComma","zero","rel","Snackbar","open","autoHideDuration","onClose","severity"],"sourceRoot":""}