{"version":3,"file":"static/js/312.811c2651.chunk.js","mappings":"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","sources":["views/twitch/crossban/index.js"],"sourcesContent":["import { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport {\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  MenuItem,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  Box,\r\n  Slider,\r\n  Autocomplete,\r\n  Paper,\r\n  Chip,\r\n  Avatar\r\n} from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    mode: 'dark'\r\n  }\r\n});\r\n\r\nconst ListItem = styled('li')(({ theme }) => ({\r\n  margin: theme.spacing(0.5)\r\n}));\r\n\r\nconst marks = [\r\n  {\r\n    value: 25,\r\n    label: '25ms'\r\n  },\r\n  {\r\n    value: 100,\r\n    label: '100ms'\r\n  },\r\n  {\r\n    value: 250,\r\n    label: '250ms'\r\n  },\r\n  {\r\n    value: 500,\r\n    label: '500ms'\r\n  },\r\n  {\r\n    value: 750,\r\n    label: '750ms'\r\n  },\r\n  {\r\n    value: 1000,\r\n    label: '1s'\r\n  }\r\n];\r\n\r\nfunction valuetext(value) {\r\n  return `${value}ms`;\r\n}\r\n\r\nconst getNames = async (channels) => {\r\n  const idParams = channels.map((channel) => `id=${encodeURIComponent(channel.id)}`).join('&');\r\n  const url = `https://api.twitch.tv/helix/users?${idParams}`;\r\n\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n    }\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message ? `${data.error}, ${data.message}` : response.statusText);\r\n  }\r\n\r\n  const names = data.data.map((user) => ({ id: user.id, name: user.login, pfp: user.profile_image_url.replace('300x300', '50x50') }));\r\n  return names;\r\n};\r\n\r\nfunction chunkArray(array, size) {\r\n  let result = [];\r\n  for (let i = 0; i < array.length; i += size) {\r\n    let chunk = array.slice(i, i + size);\r\n    result.push(chunk);\r\n  }\r\n  return result;\r\n}\r\n\r\nconst Page = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [outputData, setOutputData] = useState(null);\r\n  const [outputError, setOutputError] = useState(null);\r\n  const [selectedType, setSelectedType] = useState('');\r\n  const [channel, setChannel] = useState('');\r\n  const [sliderValue, setSliderValue] = useState(100);\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [chipData, setChipData] = useState([]);\r\n\r\n  const handleDelete = (chipToDelete) => {\r\n    localStorage.setItem(\r\n      'crossbanChannels',\r\n      JSON.stringify(JSON.parse(localStorage.getItem('crossbanChannels')).filter((chip) => chip.id !== chipToDelete.id))\r\n    );\r\n    setChipData((chips) => chips.filter((chip) => chip.id !== chipToDelete.id));\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.title = `LsCo Software - Crossban`;\r\n\r\n    const login = localStorage.getItem('login') || null;\r\n\r\n    if (!login) {\r\n      setOutputData('Log in to get started.');\r\n      setOutputError(null);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const storedChannels = localStorage.getItem('crossbanChannels');\r\n      if (storedChannels) {\r\n        const parsedChannels = JSON.parse(storedChannels);\r\n        const names = await getNames(parsedChannels);\r\n        setChipData(names ?? []);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  async function banUser(channelID, users) {\r\n    try {\r\n      await Promise.all(\r\n        chunkArray(users, 100).map(async (chunk) => {\r\n          const response = await fetch(`https://api.twitch.tv/helix/users?login=${chunk.map((data) => data.login).join('&login=')}`, {\r\n            headers: {\r\n              'Client-ID': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n            }\r\n          });\r\n          const data = await response.json();\r\n          if (!response.ok) throw new Error(`API Error -> Status: ${data.error}, ${data.status} - ${data.message}`);\r\n\r\n          data.data.forEach((user) => {\r\n            const existingUser = users.find((u) => u.login === user.login);\r\n            if (existingUser) existingUser.id = user.id;\r\n          });\r\n\r\n          return data.data.map((user) => user.id);\r\n        })\r\n      );\r\n\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).id\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, reason: data.reason } })\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function timeoutUser(channelID, users) {\r\n    try {\r\n      await Promise.all(\r\n        chunkArray(users, 100).map(async (chunk) => {\r\n          const response = await fetch(`https://api.twitch.tv/helix/users?login=${chunk.map((data) => data.login).join('&login=')}`, {\r\n            headers: {\r\n              'Client-ID': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n            }\r\n          });\r\n          const data = await response.json();\r\n          if (!response.ok) throw new Error(`API Error -> Status: ${data.error}, ${data.status} - ${data.message}`);\r\n\r\n          data.data.forEach((user) => {\r\n            const existingUser = users.find((u) => u.login === user.login);\r\n            if (existingUser) existingUser.id = user.id;\r\n          });\r\n\r\n          return data.data.map((user) => user.id);\r\n        })\r\n      );\r\n\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).id\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, duration: Number(data.duration), reason: data.reason } })\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function banUser_id(channelID, users) {\r\n    try {\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).id\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, reason: data.reason } })\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function timeoutUser_id(channelID, users) {\r\n    try {\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).id\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, duration: Number(data.duration), reason: data.reason } })\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function unbanUser(channelID, users) {\r\n    try {\r\n      await Promise.all(\r\n        chunkArray(users, 100).map(async (chunk) => {\r\n          const response = await fetch(`https://api.twitch.tv/helix/users?login=${chunk.map((data) => data.login).join('&login=')}`, {\r\n            headers: {\r\n              'Client-ID': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n            }\r\n          });\r\n          const data = await response.json();\r\n          if (!response.ok) throw new Error(`API Error -> Status: ${data.error}, ${data.status} - ${data.message}`);\r\n\r\n          data.data.forEach((user) => {\r\n            const existingUser = users.find((u) => u.login === user.login);\r\n            if (existingUser) existingUser.id = user.id;\r\n          });\r\n\r\n          return data.data.map((user) => user.id);\r\n        })\r\n      );\r\n\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).id\r\n          }&user_id=${data.id}`,\r\n          {\r\n            method: 'DELETE',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id,\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function unbanUser_id(channelID, users) {\r\n    try {\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).id\r\n          }&user_id=${data.id}`,\r\n          {\r\n            method: 'DELETE',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id,\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n        );\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  const handleSearchChange = async (value) => {\r\n    if (value.trim() !== '') {\r\n      const response = await fetch(`https://api.twitch.tv/helix/search/channels?query=${value}&first=25`, {\r\n        headers: {\r\n          'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setSearchResults(\r\n          data.data.map((channel) => {\r\n            return {\r\n              name: `${channel.display_name} - ID: ${channel.id}`,\r\n              avatarUrl: channel.thumbnail_url.replace(\"300x300\", \"50x50\")\r\n            };\r\n          })\r\n        );\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } else {\r\n      setSearchResults([]);\r\n    }\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    if (!chipData.length) {\r\n      setOutputData(null);\r\n      setOutputError('You must specify a channel');\r\n      return;\r\n    }\r\n\r\n    if (!selectedType) {\r\n      setOutputData(null);\r\n      setOutputError('You must specify a filesay type');\r\n      return;\r\n    }\r\n\r\n    if (!message.trim()) {\r\n      setOutputData(null);\r\n      setOutputError('You must specify a filesay list');\r\n      return;\r\n    }\r\n\r\n    if (!localStorage.getItem('login')) {\r\n      setOutputData('Log in to get started.');\r\n      setOutputError(null);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const text = message.split(/\\r?\\n/).map((x) => x.trim());\r\n      let type;\r\n\r\n      if (text.length >= 500) {\r\n        setOutputData(null);\r\n        setOutputError('You have too many lines.');\r\n        return;\r\n      }\r\n\r\n      setOutputData(null);\r\n      setOutputError(null);\r\n\r\n      if (selectedType === 'ban-list-id') {\r\n        type = 4;\r\n      } else if (selectedType === 'unban-list-id') {\r\n        type = 3;\r\n      } else if (selectedType === 'ban-list-name') {\r\n        type = 2;\r\n      } else if (selectedType === 'unban-list-name') {\r\n        type = 1;\r\n      } else {\r\n        type = 0;\r\n      }\r\n\r\n      const messages = [];\r\n      const timeouts = [];\r\n      const timeouts_id = [];\r\n      const unbans = [];\r\n      const bans = [];\r\n      const unbans_id = [];\r\n      const bans_id = [];\r\n\r\n      for (let i = 0; i < text.length; i++) {\r\n        const line = text[i];\r\n        if (line) {\r\n          switch (type) {\r\n            case 0: {\r\n              switch (true) {\r\n                case line.match(/^(\\.|\\/)timeout\\s\\w+\\s(\\d+)(\\s.+)?/i) !== null: {\r\n                  const [, login, duration, ...reason] = line.split(/\\s+/);\r\n                  if (!timeouts.find((x) => x.login === login.toLowerCase())) {\r\n                    timeouts.push({ login: login.toLowerCase(), duration: duration, reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)ban\\s\\w+(\\s.+)?/i) !== null: {\r\n                  const [, login, ...reason] = line.split(/\\s+/);\r\n                  if (!bans.find((x) => x.login === login.toLowerCase())) {\r\n                    bans.push({ login: login.toLowerCase(), reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)unban\\s\\w+/i) !== null || line.match(/^(\\.|\\/)untimeout\\s\\w+/i) !== null: {\r\n                  const [, login] = line.split(/\\s+/);\r\n                  if (!unbans.find((x) => x.login === login.toLowerCase())) {\r\n                    unbans.push({ login: login.toLowerCase() });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)timeoutid\\s\\w+\\s(\\d+)(\\s.+)?/i) !== null: {\r\n                  const [, id, duration, ...reason] = line.split(/\\s+/);\r\n                  if (!timeouts_id.find((x) => x.id === id)) {\r\n                    timeouts_id.push({ id: id, duration: duration, reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)banid\\s\\w+(\\s.+)?/i) !== null: {\r\n                  const [, id, ...reason] = line.split(/\\s+/);\r\n                  if (!bans_id.find((x) => x.id === id)) {\r\n                    bans_id.push({ id: id, reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)unbanid\\s\\w+/i) !== null || line.match(/^(\\.|\\/)untimeoutid\\s\\w+/i) !== null: {\r\n                  const [, id] = line.split(/\\s+/);\r\n                  if (!unbans_id.find((x) => x.id === id)) {\r\n                    unbans_id.push({ id: id });\r\n                  }\r\n                  break;\r\n                }\r\n                default: {\r\n                  messages.push({ message: line });\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            case 1: {\r\n              const [login] = line.split(/\\s+/);\r\n              if (!unbans.find((x) => x.login === login.toLowerCase())) {\r\n                unbans.push({ login: login.toLowerCase() });\r\n              }\r\n              break;\r\n            }\r\n            case 2: {\r\n              const [login, ...reason] = line.split(/\\s+/);\r\n              if (!bans.find((x) => x.login === login.toLowerCase())) {\r\n                bans.push({\r\n                  login: login.toLowerCase(),\r\n                  reason: reason ? reason.join(' ') : `Ban-list`\r\n                });\r\n              }\r\n              break;\r\n            }\r\n            case 3: {\r\n              const [id] = line.split(/\\s+/);\r\n              if (!unbans.find((x) => x.id === id)) {\r\n                unbans_id.push({ id: id });\r\n              }\r\n              break;\r\n            }\r\n            case 4: {\r\n              const [id, ...reason] = line.split(/\\s+/);\r\n              if (!bans.find((x) => x.id === id)) {\r\n                bans_id.push({ id: id, reason: reason ? reason.join(' ') : `Ban-list` });\r\n              }\r\n              break;\r\n            }\r\n            default: {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log('Bans', bans, bans.length);\r\n      console.log('Unbans', unbans, unbans.length);\r\n      console.log('Bans (ID)', bans_id, bans_id.length);\r\n      console.log('Unbans (ID)', unbans_id, unbans_id.length);\r\n      console.log('Timeouts', timeouts, timeouts.length);\r\n      console.log('Timeouts (ID)', timeouts_id, timeouts_id.length);\r\n      console.log('Messages', messages, messages.length);\r\n\r\n      for (let i = 0; i < chipData.length; i++) {\r\n        const channelData = chipData[i];\r\n        await Promise.all([\r\n          banUser(channelData.id, bans),\r\n          unbanUser(channelData.id, unbans),\r\n          banUser_id(channelData.id, bans_id),\r\n          unbanUser_id(channelData.id, unbans_id),\r\n          timeoutUser(channelData.id, timeouts),\r\n          timeoutUser_id(channelData.id, timeouts_id)\r\n        ]);\r\n\r\n        if (messages.length) {\r\n          const ws = new WebSocket('wss://irc-ws.chat.twitch.tv');\r\n\r\n          ws.onopen = async () => {\r\n            ws.send('CAP REQ :twitch.tv/membership twitch.tv/tags twitch.tv/commands');\r\n            ws.send('PASS oauth:' + JSON.parse(localStorage.getItem('login')).access_token);\r\n            ws.send('NICK ' + JSON.parse(localStorage.getItem('login')).login);\r\n\r\n            for (let i = 0; i < messages.length; i++) {\r\n              const message = messages[i].message;\r\n              ws.send(`PRIVMSG #${channelData.name} :${message}`);\r\n              await new Promise((x) => setTimeout(x, sliderValue));\r\n\r\n              if (i === messages.length - 1) {\r\n                ws.close();\r\n              }\r\n            }\r\n          };\r\n        }\r\n\r\n        await new Promise((x) => setTimeout(x, 500));\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      setOutputData(null);\r\n      setOutputError(err.message);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const addCrossbanChannel = async () => {\r\n    if (channel.name.trim() === '') {\r\n      setOutputData(null);\r\n      setOutputError('You must specify a Crossban channel');\r\n      return;\r\n    }\r\n\r\n    const channels = localStorage.getItem('crossbanChannels') ? JSON.parse(localStorage.getItem('crossbanChannels')) : [];\r\n\r\n    if (channels.find((i) => i.id === channel.name.split(' ')[3])) {\r\n      setOutputData(null);\r\n      setOutputError(`${channel} is already in Crossban list.`);\r\n      return;\r\n    }\r\n\r\n    channels.push({\r\n      id: channel.name.split(' ')[3]\r\n    });\r\n\r\n    localStorage.setItem('crossbanChannels', JSON.stringify(channels));\r\n\r\n    const data = await getNames([\r\n      {\r\n        id: channel.name.split(' ')[3]\r\n      }\r\n    ]);\r\n\r\n    const newChipData = [...chipData, { id: channel.name.split(' ')[3], name: data[0].name, pfp: data[0].pfp }];\r\n\r\n    setChipData(newChipData);\r\n\r\n    setOutputData(`Successfully added ${channel.name} as Crossban channel.`);\r\n    setOutputError(null);\r\n  };\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    setSliderValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Crossban\" description=\"Ban/timeout multiple users in multiple channels.\">\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item xs={10}>\r\n          <Autocomplete\r\n            options={searchResults}\r\n            getOptionLabel={(option) => option.name}\r\n            onChange={(event, value) => {\r\n              setChannel(value);\r\n            }}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                fullWidth\r\n                id=\"standard-basic\"\r\n                label=\"Add Channel\"\r\n                variant=\"filled\"\r\n                onChange={(event) => {\r\n                  handleSearchChange(event.target.value);\r\n                }}\r\n              />\r\n            )}\r\n            renderOption={(props, option) => (\r\n              <li {...props}>\r\n                <Box display=\"flex\" alignItems=\"center\">\r\n                  <Avatar src={option.avatarUrl} alt={option.name} sx={{ width: 25, height: 25, marginRight: 1 }} />\r\n                  {option.name}\r\n                </Box>\r\n              </li>\r\n            )}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Button variant=\"contained\" fullWidth onClick={addCrossbanChannel}>\r\n            Add Crossban Channel\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Paper\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              flexWrap: 'wrap',\r\n              listStyle: 'none',\r\n              p: 0.5,\r\n              m: 0\r\n            }}\r\n            component=\"ul\"\r\n          >\r\n            {chipData.map((i) => {\r\n              return (\r\n                <ListItem key={i.id}>\r\n                  <Chip avatar={<Avatar alt=\"xd\" src={i.pfp} />} label={`${i.name} - ID: ${i.id}`} onDelete={() => handleDelete(i)} />\r\n                </ListItem>\r\n              );\r\n            })}\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <FormControl fullWidth variant=\"filled\">\r\n            <InputLabel id=\"type-label\">Type</InputLabel>\r\n            <Select value={selectedType} onChange={(e) => setSelectedType(e.target.value)} labelId=\"type-label\" id=\"type-select\">\r\n              <MenuItem value=\"filesay\">Filesay</MenuItem>\r\n              <MenuItem value=\"ban-list-name\">Ban List (Name)</MenuItem>\r\n              <MenuItem value=\"unban-list-name\">Unban List (Name)</MenuItem>\r\n              <MenuItem value=\"ban-list-id\">Ban List (ID)</MenuItem>\r\n              <MenuItem value=\"unban-list-id\">Unban List (ID)</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            multiline\r\n            rows={10}\r\n            id=\"standard-basic\"\r\n            label=\"Text\"\r\n            variant=\"filled\"\r\n            value={message}\r\n            onChange={(e) => setMessage(e.target.value)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} style={{ textAlign: 'right' }}>\r\n          Lines. ({message.split('\\n').length}/500)\r\n        </Grid>\r\n        <ThemeProvider theme={darkTheme}>\r\n          <Grid item xs={12}>\r\n            <Typography gutterBottom>Output delay</Typography>\r\n            <FormControl fullWidth variant=\"filled\">\r\n              <Slider\r\n                aria-label=\"Delay\"\r\n                value={sliderValue}\r\n                onChange={handleSliderChange}\r\n                getAriaValueText={valuetext}\r\n                step={null}\r\n                valueLabelDisplay=\"auto\"\r\n                marks={marks}\r\n                min={marks[0].value}\r\n                max={marks[marks.length - 1].value}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n        </ThemeProvider>\r\n        <Grid item xs={12}>\r\n          <Button variant=\"contained\" fullWidth onClick={handleClick}>\r\n            Send\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {outputError && (\r\n            <Typography variant=\"body2\" style={{ color: 'red', marginTop: '10px', textAlign: 'center' }}>\r\n              {outputError}\r\n            </Typography>\r\n          )}\r\n          {outputData && (\r\n            <Typography variant=\"body2\" style={{ marginTop: '10px', textAlign: 'center' }}>\r\n              {outputData}\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["darkTheme","createTheme","palette","mode","ListItem","styled","_ref","theme","margin","spacing","marks","value","label","valuetext","getNames","async","url","channels","map","channel","encodeURIComponent","id","join","response","fetch","headers","data","json","ok","Error","message","error","statusText","user","name","login","pfp","profile_image_url","replace","chunkArray","array","size","result","i","length","chunk","slice","push","Page","setMessage","useState","outputData","setOutputData","outputError","setOutputError","selectedType","setSelectedType","setChannel","sliderValue","setSliderValue","searchResults","setSearchResults","chipData","setChipData","banUser","channelID","users","Promise","all","status","forEach","existingUser","find","u","JSON","parse","localStorage","getItem","method","Authorization","access_token","client_id","body","stringify","user_id","reason","x","setTimeout","console","log","timeoutUser","duration","Number","banUser_id","timeoutUser_id","unbanUser","unbanUser_id","useEffect","document","title","storedChannels","parsedChannels","names","fetchData","_jsx","MainCard","description","children","_jsxs","Grid","container","alignItems","item","xs","Autocomplete","options","getOptionLabel","option","onChange","event","renderInput","params","TextField","fullWidth","variant","trim","display_name","avatarUrl","thumbnail_url","handleSearchChange","target","renderOption","props","Box","display","Avatar","src","alt","sx","width","height","marginRight","Button","onClick","split","setItem","newChipData","Paper","justifyContent","flexWrap","listStyle","p","m","component","Chip","avatar","onDelete","handleDelete","chipToDelete","filter","chip","chips","FormControl","InputLabel","Select","e","labelId","MenuItem","multiline","rows","style","textAlign","ThemeProvider","Typography","gutterBottom","Slider","handleSliderChange","newValue","getAriaValueText","step","valueLabelDisplay","min","max","text","type","messages","timeouts","timeouts_id","unbans","bans","unbans_id","bans_id","line","match","toLowerCase","channelData","ws","WebSocket","onopen","send","close","err","color","marginTop"],"sourceRoot":""}