{"version":3,"file":"static/js/393.878794ac.chunk.js","mappings":"qOAQA,MAAMA,EAAW,CACf,0BAA2B,CAAEC,GAAI,IAK7BC,GAAWC,EAAAA,EAAAA,aACf,CAAAC,EAeEC,KACI,IAfJ,OACEC,GAAS,EAAI,UACbC,EAAS,SACTC,EAAQ,QACRC,GAAU,EAAI,aACdC,EAAe,GAAE,UACjBC,EAAY,CAAC,EAAC,UACdC,EAAS,UACTC,EAAS,OACTC,EAAM,GACNC,EAAK,CAAC,EAAC,MACPC,KACGC,GACJb,EAGD,MAAMc,GAAQC,EAAAA,EAAAA,KAEd,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHhB,IAAKA,KACDY,EACJF,GAAI,CACFT,OAAQA,EAAS,YAAc,OAC/BgB,YAAaJ,EAAMK,QAAQC,QAAQ,KAAO,GAC1C,SAAU,CACRjB,UAAWA,EAAYO,GAAU,kCAAoC,cAEpEC,GACHP,SAAA,CAGDQ,IAASS,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACX,GAAIf,EAAUgB,MAAOJ,GAAYa,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,KAAIpB,SAAEQ,IAAsBA,EAAOa,OAAQhB,IAGrHG,IAASS,EAAAA,EAAAA,KAACK,EAAAA,EAAO,IAGjBrB,IACCgB,EAAAA,EAAAA,KAACM,EAAAA,EAAW,CAAChB,GAAIJ,EAAWqB,UAAWtB,EAAaF,SACjDA,KAGHC,GAAWD,IACR,IAmBb,K,wJCseA,UAhjBayB,KACX,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAE5BC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,KACxCG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,KAEtCK,EAAWC,IAAgBN,EAAAA,EAAAA,UAAS,KACpCO,EAAiBC,IAAsBR,EAAAA,EAAAA,UAAS,KAChDS,EAAcC,IAAmBV,EAAAA,EAAAA,UAAS,KAC1CW,EAAmBC,IAAwBZ,EAAAA,EAAAA,UAAS,OACpDa,EAAeC,IAAoBd,EAAAA,EAAAA,UAAS,KAC5Ce,EAAcC,IAAmBhB,EAAAA,EAAAA,UAAS,IAE3CiB,EAAWC,UACf,GAAqB,KAAjBpB,EAAMqB,OAGR,OAFAjB,EAAe,wCACfE,EAAc,IAGd,IACE,MAAMgB,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,GAEvDC,QAAiBC,EAAc5B,EAAM6B,QAAQ,cAAe,KAElE,OAAIP,EAAOQ,MAAMC,GAAQA,EAAIC,KAAOL,EAASM,QAAQC,iBACnD9B,EAAe,mCACfE,EAAc,MAIhBgB,EAAOa,KAAK,CACVH,GAAIL,EAASM,QACbG,MAAOT,EAASS,MAChBC,aAAcrC,EAAM6B,QAAQ,cAAe,IAC3CS,UAAWX,EAASW,YAGtBb,aAAac,QAAQ,SAAUhB,KAAKiB,UAAUlB,UAExCmB,IAENnC,EAAc,SACdA,EAAe,6BAA4BqB,EAASS,eAAeT,EAASM,WAM9E,CAJE,MAAOS,GAGP,OAFAtC,EAAesC,EAAIC,cACnBrC,EAAc,GAEhB,CACF,EAGImC,EAAiBrB,UACrB,MACMwB,GADSrB,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,IACtCmB,KAAI3E,IAAA,IAAC,MAAEkE,EAAK,GAAEJ,GAAI9D,EAAA,MAAM,CAC7C4E,MAAOd,EACPe,MAAQ,GAAEX,WAAeJ,IAC1B,IAEGY,EAAQI,QAAU,EACpBxC,EAAaoC,GAEbpC,EAAa,CAAC,CAAEsC,MAAO,GAAIC,MAAO,gBACpC,EAGIE,EAAqB7B,UACzB,GAAqB,KAAjB0B,EAAMzB,OAAe,CACvB,MAAM6B,QAAiBC,MAAO,qDAAoDL,IAAS,CACzFM,QAAS,CACP,YAAa,qCAIXC,QAAaH,EAASI,OAExBJ,EAASK,GACXvC,EAAiBqC,EAAKA,KAAKR,KAAKW,GAAa,GAAEA,EAAQC,sBAAsBD,EAAQxB,QAErFhB,EAAiB,GAErB,MACEA,EAAiB,GACnB,GAGF0C,EAAAA,EAAAA,YAAU,KACRjB,GAAgB,GACf,KAEHiB,EAAAA,EAAAA,YAAU,KACRtD,EAAe,IACfE,EAAc,IAEd,MAkDMqD,EAAYvC,UAChB,IAAKX,EAGH,OAFAL,EAAe,6BACfE,EAAc,IAIhB,MAAMgB,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,GAEvDkC,EAAQtC,EAAOuC,WAAWC,GAAMA,EAAE9B,KAAOvB,IAEzCsD,QAAgBZ,MACnB,4DAA2D7B,EAAOsC,GAAO5B,cAAcf,EAAa+C,MAAM,UAAU,KACrH,CACEC,OAAQ,SACRb,QAAS,CACPc,cAAgB,UAAS5C,EAAOsC,GAAOvB,eACvC,YAAaf,EAAOsC,GAAOtB,aAKjC,IAAKyB,EAAQR,GAAI,CACf,MAAMF,QAAaU,EAAQT,OAI3B,OAFAlD,EAAeiD,EAAKV,cACpBrC,EAAc,GAEhB,CAEAA,EAAc,IACdA,EAAe,wBAAuBW,EAAa+C,MAAM,UAAU,gBAAgB1C,EAAOsC,GAAOxB,QAC3F,EAGF+B,EAAY/C,UAChB,IAAKX,EAGH,OAFAL,EAAe,6BACfE,EAAc,IAIhB,MAAMgB,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,GAEvDkC,EAAQtC,EAAOuC,WAAWC,GAAMA,EAAE9B,KAAOvB,IAE/C2D,QAAQC,IAAIpD,GAEZ,MAAM8C,QAAgBZ,MACnB,oEAAmE7B,EAAOsC,GAAO5B,cAAcf,EAAa+C,MAAM,UAAU,KAC7H,CACEC,OAAQ,SACRb,QAAS,CACPc,cAAgB,UAAS5C,EAAOsC,GAAOvB,eACvC,YAAaf,EAAOsC,GAAOtB,aAKjC,IAAKyB,EAAQR,GAAI,CACf,MAAMF,QAAaU,EAAQT,OAI3B,OAFAlD,EAAeiD,EAAKV,cACpBrC,EAAc,GAEhB,CAEAA,EAAc,IACdA,EAAe,wBAAuBW,EAAa+C,MAAM,UAAU,sBAAsB1C,EAAOsC,GAAOxB,QACjG,EAGFkC,EAASlD,UACb,IAAKX,EAGH,OAFAL,EAAe,6BACfE,EAAc,IAIhB,MAAMgB,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,GAEvDkC,EAAQtC,EAAOuC,WAAWC,GAAMA,EAAE9B,KAAOvB,IAEzCsD,QAAgBZ,MACnB,4DAA2D7B,EAAOsC,GAAO5B,cAAcf,EAAa+C,MAAM,UAAU,KACrH,CACEC,OAAQ,OACRb,QAAS,CACPc,cAAgB,UAAS5C,EAAOsC,GAAOvB,eACvC,YAAaf,EAAOsC,GAAOtB,aAKjC,IAAKyB,EAAQR,GAAI,CACf,MAAMF,QAAaU,EAAQT,OAI3B,OAFAlD,EAAeiD,EAAKV,cACpBrC,EAAc,GAEhB,CAEAA,EAAc,IACdA,EAAe,sBAAqBW,EAAa+C,MAAM,UAAU,gBAAgB1C,EAAOsC,GAAOxB,QACzF,EAGFmC,EAASnD,UACb,IAAKX,EAGH,OAFAL,EAAe,6BACfE,EAAc,IAIhB,MAAMgB,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,GAEvDkC,EAAQtC,EAAOuC,WAAWC,GAAMA,EAAE9B,KAAOvB,IAE/C2D,QAAQC,IAAIpD,GAEZ,MAAM8C,QAAgBZ,MACnB,oEAAmE7B,EAAOsC,GAAO5B,cAAcf,EAAa+C,MAAM,UAAU,KAC7H,CACEC,OAAQ,OACRb,QAAS,CACPc,cAAgB,UAAS5C,EAAOsC,GAAOvB,eACvC,YAAaf,EAAOsC,GAAOtB,aAKjC,IAAKyB,EAAQR,GAAI,CACf,MAAMF,QAAaU,EAAQT,OAI3B,OAFAlD,EAAeiD,EAAKV,cACpBrC,EAAc,GAEhB,CAEAA,EAAc,IACdA,EAAe,sBAAqBW,EAAa+C,MAAM,UAAU,sBAAsB1C,EAAOsC,GAAOxB,QAC/F,EAGUhB,WAChB,GAAqB,kBAAjBT,EACFG,GACE5B,EAAAA,EAAAA,MAACsF,EAAAA,SAAc,CAAAlG,SAAA,EACbiB,EAAAA,EAAAA,KAACkF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGrG,UAChBiB,EAAAA,EAAAA,KAACqF,EAAAA,EAAY,CACXhC,QAAS7B,EACT8D,SAAUA,CAACC,EAAOhC,KAChBsB,QAAQC,IAAIvB,GACZ5B,EAAgB4B,EAAM,EAExBiC,YAAcC,IACZzF,EAAAA,EAAAA,KAAC0F,EAAAA,EAAS,IACJD,EACJE,WAAS,EACTlD,GAAG,iBACHe,MAAM,OACNrD,QAAQ,SACRmF,SAAWC,IACT7B,EAAmB6B,EAAMK,OAAOrC,MAAM,SAMhDvD,EAAAA,EAAAA,KAACkF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGrG,UAChBiB,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CAAC1F,QAAQ,YAAYwF,WAAS,EAACG,QAASd,EAAOjG,SAAC,mBAMxD,GAAqB,YAAjBqC,EACTG,GACE5B,EAAAA,EAAAA,MAACsF,EAAAA,SAAc,CAAAlG,SAAA,EACbiB,EAAAA,EAAAA,KAACkF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGrG,UAChBiB,EAAAA,EAAAA,KAACqF,EAAAA,EAAY,CACXhC,QAAS7B,EACT8D,SAAUA,CAACC,EAAOhC,KAChB5B,EAAgB4B,EAAM,EAExBiC,YAAcC,IACZzF,EAAAA,EAAAA,KAAC0F,EAAAA,EAAS,IACJD,EACJE,WAAS,EACTlD,GAAG,iBACHe,MAAM,OACNrD,QAAQ,SACRmF,SAAWC,IACT7B,EAAmB6B,EAAMK,OAAOrC,MAAM,SAMhDvD,EAAAA,EAAAA,KAACkF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGrG,UAChBiB,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CAAC1F,QAAQ,YAAYwF,WAAS,EAACG,QAASf,EAAOhG,SAAC,mBAMxD,GAAqB,qBAAjBqC,EAAqC,CAC9C,MAEM2E,EAAQ,CACZ1C,aApQUxB,WACd,IAAKX,EAGH,OAFAL,EAAe,wBACfE,EAAc,IACP,GAGT,MAAMgB,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,GAEvDkC,EAAQtC,EAAOuC,WAAWC,GAAMA,EAAE9B,KAAOvB,IAEzCyC,QAAiBC,MAAM,oEAAsE7B,EAAOsC,GAAO5B,GAAI,CACnHoB,QAAS,CACPc,cAAgB,UAAS5C,EAAOsC,GAAOvB,eACvC,YAAaf,EAAOsC,GAAOtB,aAIzBe,QAAaH,EAASI,OAE5B,OAAKJ,EAASK,GAEPF,EAAKA,KAAKR,KAAK0C,GAAO,GAAEA,EAAEC,mBAAmBD,EAAEtD,YAF7B,EAEuC,EA2O3CwD,IAMnB3E,GACE5B,EAAAA,EAAAA,MAACsF,EAAAA,SAAc,CAAAlG,SAAA,EACbiB,EAAAA,EAAAA,KAACkF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGrG,UAChBiB,EAAAA,EAAAA,KAACqF,EAAAA,EAAY,IACPU,EACJtD,GAAG,0BACH6C,SAAUA,CAACC,EAAOhC,KAChB5B,EAAgB4B,EAAM,EAExBiC,YAAcC,IAAWzF,EAAAA,EAAAA,KAAC0F,EAAAA,EAAS,IAAKD,EAAQjC,MAAM,YAAYrD,QAAQ,gBAG9EH,EAAAA,EAAAA,KAACkF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGrG,UAChBiB,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CAAC1F,QAAQ,YAAYwF,WAAS,EAACG,QAASlB,EAAU7F,SAAC,gBAMlE,MAAO,GAAqB,eAAjBqC,EAA+B,CACxC,MAEM2E,EAAQ,CACZ1C,aArQUxB,WACd,IAAKX,EAGH,OAFAL,EAAe,wBACfE,EAAc,IACP,GAGT,MAAMgB,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,GAEvDkC,EAAQtC,EAAOuC,WAAWC,GAAMA,EAAE9B,KAAOvB,IAEzCyC,QAAiBC,MAAM,4DAA8D7B,EAAOsC,GAAO5B,GAAI,CAC3GoB,QAAS,CACPc,cAAgB,UAAS5C,EAAOsC,GAAOvB,eACvC,YAAaf,EAAOsC,GAAOtB,aAIzBe,QAAaH,EAASI,OAE5B,OAAKJ,EAASK,GAEPF,EAAKA,KAAKR,KAAK0C,GAAO,GAAEA,EAAEC,mBAAmBD,EAAEtD,YAF7B,EAEuC,EA4O3CyD,IAMnB5E,GACE5B,EAAAA,EAAAA,MAACsF,EAAAA,SAAc,CAAAlG,SAAA,EACbY,EAAAA,EAAAA,MAACuF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGrG,SAAA,EAChBiB,EAAAA,EAAAA,KAACqF,EAAAA,EAAY,IACPU,EACJtD,GAAG,0BACH6C,SAAUA,CAACC,EAAOhC,KAChB5B,EAAgB4B,EAAM,EAExBiC,YAAcC,IAAWzF,EAAAA,EAAAA,KAAC0F,EAAAA,EAAS,IAAKD,EAAQjC,MAAM,MAAMrD,QAAQ,aACnE,QAELH,EAAAA,EAAAA,KAACkF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGrG,UAChBiB,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CAAC1F,QAAQ,YAAYwF,WAAS,EAACG,QAAS1B,EAAUrF,SAAC,gBAMlE,GAGFqH,EAAW,GACV,CAAChF,EAAcI,EAAeN,EAAiBQ,IAElD,MAmCMW,EAAgBR,UACpB,MAAMwE,QAAyBzC,MAAM,uCAAwC,CAC3EC,QAAS,CACPc,cAAgB,SAAQlE,OAItB6F,QAAqBD,EAAiBtC,OAE5C,IAAKsC,EAAiBrC,GAAI,CACxB,GACO,yBADCsC,EAAalD,QAEjB,MAAM,IAAImD,MAAM,wBAEhB,MAAM,IAAIA,MAAMD,EAAalD,SAAW,wBAE9C,CAEA,OAAOkD,CAAY,EAiBrB,OACEtG,EAAAA,EAAAA,KAACvB,EAAAA,EAAQ,CAACc,MAAM,kBAAiBR,UAC/BY,EAAAA,EAAAA,MAACuF,EAAAA,GAAI,CAACsB,WAAS,EAACC,QAAS,EAAGC,WAAW,SAAQ3H,SAAA,EAC7CiB,EAAAA,EAAAA,KAACkF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGrG,UAChBiB,EAAAA,EAAAA,KAAC0F,EAAAA,EAAS,CACRC,WAAS,EACTlD,GAAG,iBACHe,MAAM,cACNmD,KAAK,WACLpD,MAAO9C,EACPN,QAAQ,SACRmF,SAAWsB,GAAMlG,EAASkG,EAAEhB,OAAOrC,OACnCsD,WAlBcD,IACR,UAAVA,EAAEE,KACJlF,GACF,OAkBI5B,EAAAA,EAAAA,KAACkF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,EAAErG,UACfiB,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CAAC1F,QAAQ,YAAY4G,MAAO,CAAEC,WAAY,WAAarB,WAAS,EAACG,QAASlE,EAAS7C,SAAC,WAI7FiB,EAAAA,EAAAA,KAACkF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,EAAErG,UACfiB,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CAAC1F,QAAQ,YAAY4G,MAAO,CAAEC,WAAY,WAAarB,WAAS,EAACG,QA3F5DjE,UAClB,IAAKX,EAGH,OAFAL,EAAe,6BACfE,EAAc,IAGd,IACE,MAAMgB,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,GAEvDkC,EAAQtC,EAAOuC,WAAWC,GAAMA,EAAE9B,KAAOvB,IAE/C,IAAe,IAAXmD,EAGF,OAFAxD,EAAe,8BACfE,EAAc,IAIhB,MAAM+C,EAAO/B,EAAOsC,GASpB,OAPAtC,EAAOkF,OAAO5C,EAAO,GACrBnC,aAAac,QAAQ,SAAUhB,KAAKiB,UAAUlB,UAExCmB,IAENnC,EAAc,SACdA,EAAe,+BAA8B+C,EAAKjB,eAAeiB,EAAKrB,KAMxE,CAJE,MAAOU,GAGP,OAFAtC,EAAesC,EAAIC,cACnBrC,EAAc,GAEhB,CACF,EA2DmGhC,SAAC,cAIhGiB,EAAAA,EAAAA,KAACkF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGrG,UAChBiB,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CACL1F,QAAQ,YACR4G,MAAO,CAAEC,WAAY,uBAAwBnI,OAAQ,qBACrD8G,WAAS,EACTG,QA5CiBjE,UACzBqF,OAAOC,KACL,yOACA,SACA,wBACD,EAuCmCpI,SAC7B,4BAIHiB,EAAAA,EAAAA,KAACkF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,EAAErG,UACfY,EAAAA,EAAAA,MAACyH,EAAAA,EAAW,CAACzB,WAAS,EAACxF,QAAQ,SAAQpB,SAAA,EACrCiB,EAAAA,EAAAA,KAACqH,EAAAA,EAAU,CAAC5E,GAAG,gBAAe1D,SAAC,aAC/BiB,EAAAA,EAAAA,KAACsH,EAAAA,EAAM,CACL/D,MAAOrC,EACPoE,SAAWsB,GAAMzF,EAAmByF,EAAEhB,OAAOrC,OAC7CgE,QAAQ,gBACR9E,GAAG,iBAAgB1D,SAElBiC,EAAUsC,KAAI,CAACkE,EAAUnD,KACxBrE,EAAAA,EAAAA,KAACyH,EAAAA,EAAQ,CAAsBlE,MAAOiE,EAASjE,MAAOmE,SAAoB,IAAVrD,EAAYtF,SACzEyI,EAAShE,OADGgE,EAASjE,iBAOhCvD,EAAAA,EAAAA,KAACkF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,EAAErG,UACfY,EAAAA,EAAAA,MAACyH,EAAAA,EAAW,CAACzB,WAAS,EAACxF,QAAQ,SAAQpB,SAAA,EACrCiB,EAAAA,EAAAA,KAACqH,EAAAA,EAAU,CAAC5E,GAAG,aAAY1D,SAAC,UAC5BY,EAAAA,EAAAA,MAAC2H,EAAAA,EAAM,CAAC/D,MAAOnC,EAAckE,SAAWsB,GAAMvF,EAAgBuF,EAAEhB,OAAOrC,OAAQgE,QAAQ,aAAa9E,GAAG,cAAa1D,SAAA,EAClHiB,EAAAA,EAAAA,KAACyH,EAAAA,EAAQ,CAAClE,MAAM,eAAcxE,SAAC,kBAC/BiB,EAAAA,EAAAA,KAACyH,EAAAA,EAAQ,CAAClE,MAAM,gBAAexE,SAAC,mBAChCiB,EAAAA,EAAAA,KAACyH,EAAAA,EAAQ,CAAClE,MAAM,UAASxE,SAAC,aAC1BiB,EAAAA,EAAAA,KAACyH,EAAAA,EAAQ,CAAClE,MAAM,mBAAkBxE,SAAC,sBACnCiB,EAAAA,EAAAA,KAACyH,EAAAA,EAAQ,CAAClE,MAAM,aAAYxE,SAAC,uBAIlCuC,GACD3B,EAAAA,EAAAA,MAACuF,EAAAA,GAAI,CAACC,MAAI,EAACC,GAAI,GAAGrG,SAAA,CACf6B,IACCZ,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,QAAQ4G,MAAO,CAAEY,MAAO,MAAOC,UAAW,OAAQC,UAAW,UAAW9I,SACzF6B,IAGJE,IACCd,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,QAAQ4G,MAAO,CAAEa,UAAW,OAAQC,UAAW,UAAW9I,SAC3E+B,WAKA,C","sources":["ui-component/cards/MainCard.js","views/twitch/channel-manager/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { forwardRef } from 'react';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';\n\n// constant\nconst headerSX = {\n  '& .MuiCardHeader-action': { mr: 0 }\n};\n\n// ==============================|| CUSTOM MAIN CARD ||============================== //\n\nconst MainCard = forwardRef(\n  (\n    {\n      border = true,\n      boxShadow,\n      children,\n      content = true,\n      contentClass = '',\n      contentSX = {},\n      darkTitle,\n      secondary,\n      shadow,\n      sx = {},\n      title,\n      ...others\n    },\n    ref\n  ) => {\n    const theme = useTheme();\n\n    return (\n      <Card\n        ref={ref}\n        {...others}\n        sx={{\n          border: border ? '1px solid' : 'none',\n          borderColor: theme.palette.primary[200] + 25,\n          ':hover': {\n            boxShadow: boxShadow ? shadow || '0 2px 14px 0 rgb(32 40 45 / 8%)' : 'inherit'\n          },\n          ...sx\n        }}\n      >\n        {/* card header and action */}\n        {title && <CardHeader sx={headerSX} title={darkTitle ? <Typography variant=\"h3\">{title}</Typography> : title} action={secondary} />}\n\n        {/* content & header divider */}\n        {title && <Divider />}\n\n        {/* card content */}\n        {content && (\n          <CardContent sx={contentSX} className={contentClass}>\n            {children}\n          </CardContent>\n        )}\n        {!content && children}\n      </Card>\n    );\n  }\n);\n\nMainCard.propTypes = {\n  border: PropTypes.bool,\n  boxShadow: PropTypes.bool,\n  children: PropTypes.node,\n  content: PropTypes.bool,\n  contentClass: PropTypes.string,\n  contentSX: PropTypes.object,\n  darkTitle: PropTypes.bool,\n  secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\n  shadow: PropTypes.string,\n  sx: PropTypes.object,\n  title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\n};\n\nexport default MainCard;\n","import React, { useState, useEffect } from 'react';\r\nimport { Typography, TextField, Button, Grid, MenuItem, Select, FormControl, InputLabel, Autocomplete } from '@mui/material';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\nconst Page = () => {\r\n  const [token, setToken] = useState('');\r\n\r\n  const [outputError, setOutputError] = useState('');\r\n  const [outputData, setOutputData] = useState('');\r\n\r\n  const [menuItems, setMenuItems] = useState([]);\r\n  const [selectedChannel, setSelectedChannel] = useState('');\r\n  const [selectedType, setSelectedType] = useState('');\r\n  const [additionalElement, setAdditionalElement] = useState(null);\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [selectedUser, setSelectedUser] = useState('');\r\n\r\n  const addToken = async () => {\r\n    if (token.trim() === '') {\r\n      setOutputError('You must specify an OAuth Token');\r\n      setOutputData('');\r\n      return;\r\n    } else {\r\n      try {\r\n        const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n        const validate = await validateToken(token.replace(/^oauth[:]*/i, ''));\r\n\r\n        if (tokens.find((xyz) => xyz.id === validate.user_id.toLowerCase())) {\r\n          setOutputError('The channel already exists');\r\n          setOutputData('');\r\n          return;\r\n        }\r\n\r\n        tokens.push({\r\n          id: validate.user_id,\r\n          login: validate.login,\r\n          access_token: token.replace(/^oauth[:]*/i, ''),\r\n          client_id: validate.client_id\r\n        });\r\n\r\n        localStorage.setItem('tokens', JSON.stringify(tokens));\r\n\r\n        await updateChannels();\r\n\r\n        setOutputData('');\r\n        setOutputData(`Successfully added login: ${validate.login} - ID: ${validate.user_id}`);\r\n        return;\r\n      } catch (err) {\r\n        setOutputError(err.message);\r\n        setOutputData('');\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const updateChannels = async () => {\r\n    const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n    const options = tokens.map(({ login, id }) => ({\r\n      value: id,\r\n      label: `${login} - ID: ${id}`\r\n    }));\r\n\r\n    if (options.length >= 1) {\r\n      setMenuItems(options);\r\n    } else {\r\n      setMenuItems([{ value: '', label: 'No Channels' }]);\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = async (value) => {\r\n    if (value.trim() !== '') {\r\n      const response = await fetch(`https://api.twitch.tv/helix/search/channels?query=${value}`, {\r\n        headers: {\r\n          'Client-Id': '9uavest5z7knsvpbip19fxqkywxz3ec'\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setSearchResults(data.data.map((channel) => `${channel.display_name} - ID: ${channel.id}`));\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } else {\r\n      setSearchResults([]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateChannels();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setOutputError('');\r\n    setOutputData('');\r\n\r\n    const getMods = async () => {\r\n      if (!selectedChannel) {\r\n        setOutputError('No channel specified');\r\n        setOutputData('');\r\n        return [];\r\n      }\r\n\r\n      const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n      const index = tokens.findIndex((x) => x.id === selectedChannel);\r\n\r\n      const response = await fetch('https://api.twitch.tv/helix/moderation/moderators?broadcaster_id=' + tokens[index].id, {\r\n        headers: {\r\n          Authorization: `Bearer ${tokens[index].access_token}`,\r\n          'Client-Id': tokens[index].client_id\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) return [];\r\n\r\n      return data.data.map((i) => `${i.user_name} - ID: ${i.user_id}`);\r\n    };\r\n\r\n    const getVips = async () => {\r\n      if (!selectedChannel) {\r\n        setOutputError('No channel specified');\r\n        setOutputData('');\r\n        return [];\r\n      }\r\n\r\n      const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n      const index = tokens.findIndex((x) => x.id === selectedChannel);\r\n\r\n      const response = await fetch('https://api.twitch.tv/helix/channels/vips?broadcaster_id=' + tokens[index].id, {\r\n        headers: {\r\n          Authorization: `Bearer ${tokens[index].access_token}`,\r\n          'Client-Id': tokens[index].client_id\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) return [];\r\n\r\n      return data.data.map((i) => `${i.user_name} - ID: ${i.user_id}`);\r\n    };\r\n\r\n    const removeVip = async () => {\r\n      if (!selectedChannel) {\r\n        setOutputError('No channel specified');\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n      const index = tokens.findIndex((x) => x.id === selectedChannel);\r\n\r\n      const request = await fetch(\r\n        `https://api.twitch.tv/helix/channels/vips?broadcaster_id=${tokens[index].id}&user_id=${selectedUser.split('- ID: ')[1]}`,\r\n        {\r\n          method: 'DELETE',\r\n          headers: {\r\n            Authorization: `Bearer ${tokens[index].access_token}`,\r\n            'Client-Id': tokens[index].client_id\r\n          }\r\n        }\r\n      );\r\n\r\n      if (!request.ok) {\r\n        const data = await request.json();\r\n\r\n        setOutputError(data.message);\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      setOutputData('');\r\n      setOutputData(`Successfully removed ${selectedUser.split('- ID: ')[0]} as VIP in ${tokens[index].login}`);\r\n      return;\r\n    };\r\n\r\n    const removeMod = async () => {\r\n      if (!selectedChannel) {\r\n        setOutputError('No channel specified');\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n      const index = tokens.findIndex((x) => x.id === selectedChannel);\r\n\r\n      console.log(selectedUser);\r\n\r\n      const request = await fetch(\r\n        `https://api.twitch.tv/helix/moderation/moderators?broadcaster_id=${tokens[index].id}&user_id=${selectedUser.split('- ID: ')[1]}`,\r\n        {\r\n          method: 'DELETE',\r\n          headers: {\r\n            Authorization: `Bearer ${tokens[index].access_token}`,\r\n            'Client-Id': tokens[index].client_id\r\n          }\r\n        }\r\n      );\r\n\r\n      if (!request.ok) {\r\n        const data = await request.json();\r\n\r\n        setOutputError(data.message);\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      setOutputData('');\r\n      setOutputData(`Successfully removed ${selectedUser.split('- ID: ')[0]} as Moderator in ${tokens[index].login}`);\r\n      return;\r\n    };\r\n\r\n    const addVip = async () => {\r\n      if (!selectedChannel) {\r\n        setOutputError('No channel specified');\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n      const index = tokens.findIndex((x) => x.id === selectedChannel);\r\n\r\n      const request = await fetch(\r\n        `https://api.twitch.tv/helix/channels/vips?broadcaster_id=${tokens[index].id}&user_id=${selectedUser.split('- ID: ')[1]}`,\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            Authorization: `Bearer ${tokens[index].access_token}`,\r\n            'Client-Id': tokens[index].client_id\r\n          }\r\n        }\r\n      );\r\n\r\n      if (!request.ok) {\r\n        const data = await request.json();\r\n\r\n        setOutputError(data.message);\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      setOutputData('');\r\n      setOutputData(`Successfully added ${selectedUser.split('- ID: ')[0]} as VIP in ${tokens[index].login}`);\r\n      return;\r\n    };\r\n\r\n    const addMod = async () => {\r\n      if (!selectedChannel) {\r\n        setOutputError('No channel specified');\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n      const index = tokens.findIndex((x) => x.id === selectedChannel);\r\n\r\n      console.log(selectedUser);\r\n\r\n      const request = await fetch(\r\n        `https://api.twitch.tv/helix/moderation/moderators?broadcaster_id=${tokens[index].id}&user_id=${selectedUser.split('- ID: ')[1]}`,\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            Authorization: `Bearer ${tokens[index].access_token}`,\r\n            'Client-Id': tokens[index].client_id\r\n          }\r\n        }\r\n      );\r\n\r\n      if (!request.ok) {\r\n        const data = await request.json();\r\n\r\n        setOutputError(data.message);\r\n        setOutputData('');\r\n        return;\r\n      }\r\n\r\n      setOutputData('');\r\n      setOutputData(`Successfully added ${selectedUser.split('- ID: ')[0]} as Moderator in ${tokens[index].login}`);\r\n      return;\r\n    };\r\n\r\n    const fetchData = async () => {\r\n      if (selectedType === 'add-moderator') {\r\n        setAdditionalElement(\r\n          <React.Fragment>\r\n            <Grid item xs={12}>\r\n              <Autocomplete\r\n                options={searchResults}\r\n                onChange={(event, value) => {\r\n                  console.log(value);\r\n                  setSelectedUser(value);\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    fullWidth\r\n                    id=\"standard-basic\"\r\n                    label=\"User\"\r\n                    variant=\"filled\"\r\n                    onChange={(event) => {\r\n                      handleSearchChange(event.target.value);\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button variant=\"contained\" fullWidth onClick={addMod}>\r\n                Add\r\n              </Button>\r\n            </Grid>\r\n          </React.Fragment>\r\n        );\r\n      } else if (selectedType === 'add-vip') {\r\n        setAdditionalElement(\r\n          <React.Fragment>\r\n            <Grid item xs={12}>\r\n              <Autocomplete\r\n                options={searchResults}\r\n                onChange={(event, value) => {\r\n                  setSelectedUser(value);\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    fullWidth\r\n                    id=\"standard-basic\"\r\n                    label=\"User\"\r\n                    variant=\"filled\"\r\n                    onChange={(event) => {\r\n                      handleSearchChange(event.target.value);\r\n                    }}\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button variant=\"contained\" fullWidth onClick={addVip}>\r\n                Add\r\n              </Button>\r\n            </Grid>\r\n          </React.Fragment>\r\n        );\r\n      } else if (selectedType === 'remove-moderator') {\r\n        const mods = await getMods();\r\n\r\n        const props = {\r\n          options: mods\r\n        };\r\n\r\n        setAdditionalElement(\r\n          <React.Fragment>\r\n            <Grid item xs={12}>\r\n              <Autocomplete\r\n                {...props}\r\n                id=\"disable-close-on-select\"\r\n                onChange={(event, value) => {\r\n                  setSelectedUser(value);\r\n                }}\r\n                renderInput={(params) => <TextField {...params} label=\"Moderator\" variant=\"filled\" />}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button variant=\"contained\" fullWidth onClick={removeMod}>\r\n                Remove\r\n              </Button>\r\n            </Grid>\r\n          </React.Fragment>\r\n        );\r\n      } else if (selectedType === 'remove-vip') {\r\n        const vips = await getVips();\r\n\r\n        const props = {\r\n          options: vips\r\n        };\r\n\r\n        setAdditionalElement(\r\n          <React.Fragment>\r\n            <Grid item xs={12}>\r\n              <Autocomplete\r\n                {...props}\r\n                id=\"disable-close-on-select\"\r\n                onChange={(event, value) => {\r\n                  setSelectedUser(value);\r\n                }}\r\n                renderInput={(params) => <TextField {...params} label=\"VIP\" variant=\"filled\" />}\r\n              />{' '}\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button variant=\"contained\" fullWidth onClick={removeVip}>\r\n                Remove\r\n              </Button>\r\n            </Grid>\r\n          </React.Fragment>\r\n        );\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [selectedType, searchResults, selectedChannel, selectedUser]);\r\n\r\n  const removeToken = async () => {\r\n    if (!selectedChannel) {\r\n      setOutputError('No channel specified');\r\n      setOutputData('');\r\n      return;\r\n    } else {\r\n      try {\r\n        const tokens = JSON.parse(localStorage.getItem('tokens')) || [];\r\n\r\n        const index = tokens.findIndex((x) => x.id === selectedChannel);\r\n\r\n        if (index === -1) {\r\n          setOutputError('There are no channels');\r\n          setOutputData('');\r\n          return;\r\n        }\r\n\r\n        const data = tokens[index];\r\n\r\n        tokens.splice(index, 1);\r\n        localStorage.setItem('tokens', JSON.stringify(tokens));\r\n\r\n        await updateChannels();\r\n\r\n        setOutputData('');\r\n        setOutputData(`Successfully removed login: ${data.login} - ID: ${data.id}`);\r\n        return;\r\n      } catch (err) {\r\n        setOutputError(err.message);\r\n        setOutputData('');\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n  const validateToken = async (token) => {\r\n    const validateResponse = await fetch('https://id.twitch.tv/oauth2/validate', {\r\n      headers: {\r\n        Authorization: `OAuth ${token}`\r\n      }\r\n    });\r\n\r\n    const validateData = await validateResponse.json();\r\n\r\n    if (!validateResponse.ok) {\r\n      switch (validateData.message) {\r\n        case 'invalid access token':\r\n          throw new Error('Invalid access token');\r\n        default:\r\n          throw new Error(validateData.message || 'Validate token failed');\r\n      }\r\n    }\r\n\r\n    return validateData;\r\n  };\r\n\r\n  const openTokenGenerator = async () => {\r\n    window.open(\r\n      'https://id.twitch.tv/oauth2/authorize?response_type=token&client_id=gm82v3wketnmh781aqgkv2i5m4xthz&redirect_uri=https://devlsco.de/callback/&scope=chat:read+chat:edit+channel:manage:moderators+channel:manage:vips&force_verify=true',\r\n      '_blank',\r\n      'width=600,height=1000'\r\n    );\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      addToken();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Channel Manager\">\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            fullWidth\r\n            id=\"standard-basic\"\r\n            label=\"OAuth Token\"\r\n            type=\"password\"\r\n            value={token}\r\n            variant=\"filled\"\r\n            onChange={(e) => setToken(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Button variant=\"contained\" style={{ background: '#2196f3' }} fullWidth onClick={addToken}>\r\n            Add\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <Button variant=\"contained\" style={{ background: '#ff0000' }} fullWidth onClick={removeToken}>\r\n            Remove\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button\r\n            variant=\"contained\"\r\n            style={{ background: 'hsla(0, 0%, 40%, .3)', border: '1px solid #2196f3' }}\r\n            fullWidth\r\n            onClick={openTokenGenerator}\r\n          >\r\n            Generate OAuth Token\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <FormControl fullWidth variant=\"filled\">\r\n            <InputLabel id=\"channel-label\">Channel</InputLabel>\r\n            <Select\r\n              value={selectedChannel}\r\n              onChange={(e) => setSelectedChannel(e.target.value)}\r\n              labelId=\"channel-label\"\r\n              id=\"channel-select\"\r\n            >\r\n              {menuItems.map((menuItem, index) => (\r\n                <MenuItem key={menuItem.value} value={menuItem.value} selected={index === 1}>\r\n                  {menuItem.label}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          <FormControl fullWidth variant=\"filled\">\r\n            <InputLabel id=\"type-label\">Type</InputLabel>\r\n            <Select value={selectedType} onChange={(e) => setSelectedType(e.target.value)} labelId=\"type-label\" id=\"type-select\">\r\n              <MenuItem value=\"send-message\">Send Message</MenuItem>\r\n              <MenuItem value=\"add-moderator\">Add Moderator</MenuItem>\r\n              <MenuItem value=\"add-vip\">Add VIP</MenuItem>\r\n              <MenuItem value=\"remove-moderator\">Remove Moderator</MenuItem>\r\n              <MenuItem value=\"remove-vip\">Remove VIP</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        {additionalElement}\r\n        <Grid item xs={12}>\r\n          {outputError && (\r\n            <Typography variant=\"body2\" style={{ color: 'red', marginTop: '10px', textAlign: 'center' }}>\r\n              {outputError}\r\n            </Typography>\r\n          )}\r\n          {outputData && (\r\n            <Typography variant=\"body2\" style={{ marginTop: '10px', textAlign: 'center' }}>\r\n              {outputData}\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["headerSX","mr","MainCard","forwardRef","_ref","ref","border","boxShadow","children","content","contentClass","contentSX","darkTitle","secondary","shadow","sx","title","others","theme","useTheme","_jsxs","Card","borderColor","palette","primary","_jsx","CardHeader","Typography","variant","action","Divider","CardContent","className","Page","token","setToken","useState","outputError","setOutputError","outputData","setOutputData","menuItems","setMenuItems","selectedChannel","setSelectedChannel","selectedType","setSelectedType","additionalElement","setAdditionalElement","searchResults","setSearchResults","selectedUser","setSelectedUser","addToken","async","trim","tokens","JSON","parse","localStorage","getItem","validate","validateToken","replace","find","xyz","id","user_id","toLowerCase","push","login","access_token","client_id","setItem","stringify","updateChannels","err","message","options","map","value","label","length","handleSearchChange","response","fetch","headers","data","json","ok","channel","display_name","useEffect","removeVip","index","findIndex","x","request","split","method","Authorization","removeMod","console","log","addVip","addMod","React","Grid","item","xs","Autocomplete","onChange","event","renderInput","params","TextField","fullWidth","target","Button","onClick","props","i","user_name","getMods","getVips","fetchData","validateResponse","validateData","Error","container","spacing","alignItems","type","e","onKeyPress","key","style","background","splice","window","open","FormControl","InputLabel","Select","labelId","menuItem","MenuItem","selected","color","marginTop","textAlign"],"sourceRoot":""}