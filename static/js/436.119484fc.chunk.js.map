{"version":3,"file":"static/js/436.119484fc.chunk.js","mappings":"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","sources":["views/dashboard/index.js"],"sourcesContent":["import humanizeDuration from 'humanize-duration';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Grid, Autocomplete, Button, TextField, Avatar, Box, Snackbar, Link, Typography } from '@mui/material';\r\nimport MuiAlert from '@mui/material/Alert';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div role=\"tabpanel\" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.number.isRequired,\r\n  value: PropTypes.number.isRequired\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`\r\n  };\r\n}\r\n\r\nasync function getChannel(id) {\r\n  if (!localStorage.getItem('login')) return;\r\n\r\n  const response = await fetch(`https://api.twitch.tv/helix/users?id=${encodeURIComponent(id.trim())}`, {\r\n    responseType: 'json',\r\n    throwHttpErrors: false,\r\n    headers: {\r\n      Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n      'Client-ID': JSON.parse(localStorage.getItem('login')).client_id\r\n    }\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message ? `${data.error}, ${data.message}` : response.statusText);\r\n  }\r\n\r\n  if (!data.data[0]) {\r\n    throw new Error('Channel not found.');\r\n  }\r\n\r\n  return data.data[0];\r\n}\r\n\r\nfunction humanizeLong(ms) {\r\n  return humanizeDuration(Date.now() - ms, {\r\n    units: ['y', 'mo', 'd', 'h', 'm', 's'],\r\n    largest: 4,\r\n    round: true,\r\n    spacer: ' ',\r\n    conjunction: ' and ',\r\n    serialComma: false,\r\n    zero: '0'\r\n  });\r\n}\r\n\r\nconst Page = () => {\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [searchResultsUser, setSearchResultsUser] = useState([]);\r\n  const [game, setGame] = useState({ name: '', id: null, avatarUrl: '' });\r\n  const [title, setTitle] = useState('');\r\n  const [openError, setOpenError] = useState(false);\r\n  const [openSuccess, setOpenSuccess] = useState(false);\r\n  const [errorReason, setErrorReason] = useState('');\r\n  const [successReason, setSuccessReason] = useState('');\r\n  const [channel, setChannel] = useState(null);\r\n\r\n  const [outputData, setOutputData] = useState(null);\r\n  const [outputError, setOutputError] = useState(null);\r\n\r\n  const [value, setValue] = useState(0);\r\n\r\n  const handleSearchChangeID = async (value) => {\r\n    if (value.trim() !== '') {\r\n      const fetchData = async () => {\r\n        try {\r\n          const data = await getChannel(value);\r\n          setOutputError(null);\r\n          setOutputData(data);\r\n        } catch (err) {\r\n          setOutputError(err.message);\r\n          setOutputData(null);\r\n        }\r\n      };\r\n      fetchData();\r\n    }\r\n  };\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.title = 'LsCo Software - Dashboard';\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!channel) return;\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await getChannel(channel.name.split(' ')[3]);\r\n        setOutputError(null);\r\n        setOutputData(data);\r\n      } catch (err) {\r\n        setOutputError(err.message);\r\n        setOutputData(null);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [channel]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const loginData = JSON.parse(localStorage.getItem('login'));\r\n      const isLoggedIn = localStorage.getItem('login') !== null;\r\n\r\n      if (isLoggedIn) {\r\n        try {\r\n          const responseA = await fetch(`https://api.twitch.tv/helix/channels?broadcaster_id=${loginData.id}`, {\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id\r\n            }\r\n          });\r\n\r\n          const dataA = await responseA.json();\r\n\r\n          if (responseA.ok && dataA.data.length > 0) {\r\n            const channelData = dataA.data[0];\r\n            setGame({\r\n              name: channelData.game_name.length ? channelData.game_name : 'None',\r\n              id: channelData.game_id.length ? channelData.game_id : 0,\r\n              avatarUrl: ''\r\n            });\r\n            setTitle(channelData.title);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const showError = () => {\r\n    setOpenError(true);\r\n  };\r\n\r\n  const closeError = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpenError(false);\r\n  };\r\n\r\n  const showSuccess = () => {\r\n    setOpenSuccess(true);\r\n  };\r\n\r\n  const closeSuccess = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpenSuccess(false);\r\n  };\r\n\r\n  const updateProperties = async () => {\r\n    const loginData = JSON.parse(localStorage.getItem('login'));\r\n    if (!loginData) {\r\n      setErrorReason('Log in with your Twitch account to use this tool');\r\n      showError();\r\n      return;\r\n    }\r\n\r\n    const broadcasterId = decodeURIComponent(loginData.id);\r\n\r\n    try {\r\n      const response = await fetch(`https://api.twitch.tv/helix/channels?broadcaster_id=${broadcasterId}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          Authorization: 'Bearer ' + loginData.access_token,\r\n          'Client-ID': loginData.client_id,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          game_id: game.id ?? 0,\r\n          title: title.length ? title : ' '\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const data = await response.json();\r\n        setErrorReason(data.message);\r\n        showError();\r\n      } else {\r\n        setSuccessReason('Successfully updated your title & game.');\r\n        showSuccess();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = async (value) => {\r\n    if (!localStorage.getItem('login')) {\r\n      return setSearchResults([]);\r\n    }\r\n\r\n    if (value.trim() !== '') {\r\n      const response = await fetch(`https://api.twitch.tv/helix/search/categories?query=${decodeURIComponent(value)}&first=15`, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n          'Client-ID': JSON.parse(localStorage.getItem('login')).client_id\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setSearchResults(\r\n          data.data.map((category) => ({\r\n            name: category.name,\r\n            id: category.id,\r\n            avatarUrl: category.box_art_url.replace('500', '520')\r\n          }))\r\n        );\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } else {\r\n      setSearchResults([]);\r\n    }\r\n  };\r\n\r\n  const handleSearchChangeUser = async (value) => {\r\n    if (!localStorage.getItem('login')) {\r\n      return setSearchResultsUser([]);\r\n    }\r\n\r\n    if (value.trim() !== '') {\r\n      const response = await fetch(`https://api.twitch.tv/helix/search/channels?query=${value}&first=25`, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n          'Client-ID': JSON.parse(localStorage.getItem('login')).client_id\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setSearchResultsUser(\r\n          data.data.map((channel) => {\r\n            return {\r\n              name: `${new RegExp('^\\\\w+$').test(channel.display_name) ? channel.display_name : channel.broadcaster_login} - ID: ${\r\n                channel.id\r\n              }`,\r\n              avatarUrl: channel.thumbnail_url.replace('300x300', '50x50')\r\n            };\r\n          })\r\n        );\r\n      } else {\r\n        setSearchResultsUser([]);\r\n      }\r\n    } else {\r\n      setSearchResultsUser([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Dashboard\" description=\"Here you can update the stream or get info about a user.\">\r\n      <Box>\r\n        <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\">\r\n          <Tab label=\"Stream Dashboard\" {...a11yProps(0)} />\r\n          <Tab label=\"Userinfo\" {...a11yProps(1)} />\r\n        </Tabs>\r\n      </Box>\r\n      <TabPanel value={value} index={0}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"standard-basic\"\r\n              label=\"Title\"\r\n              variant=\"filled\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              autoFocus\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <Autocomplete\r\n              value={game}\r\n              options={searchResults}\r\n              getOptionLabel={(option) => {\r\n                return option.name;\r\n              }}\r\n              onChange={(event, value) => {\r\n                setGame(value ?? { name: '', id: null, avatarUrl: '' });\r\n              }}\r\n              isOptionEqualToValue={(option, value) => option.id === value.id}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  fullWidth\r\n                  id=\"standard-basic\"\r\n                  label=\"Game\"\r\n                  variant=\"filled\"\r\n                  onChange={(event) => {\r\n                    handleSearchChange(event.target.value);\r\n                  }}\r\n                />\r\n              )}\r\n              renderOption={(props, option) => (\r\n                <li {...props}>\r\n                  <Box display=\"flex\" alignItems=\"center\">\r\n                    <Avatar variant=\"square\" src={option.avatarUrl} alt={option.name} sx={{ width: 35, height: 45, marginRight: 1 }} />\r\n                    {option.name}\r\n                  </Box>\r\n                </li>\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Button variant=\"text\" fullWidth onClick={updateProperties}>\r\n              Update\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} sm={6}>\r\n            <Autocomplete\r\n              options={searchResultsUser}\r\n              getOptionLabel={(option) => option.name}\r\n              onChange={(event, value) => {\r\n                setChannel(value);\r\n              }}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  fullWidth\r\n                  id=\"standard-basic\"\r\n                  label=\"User information\"\r\n                  variant=\"filled\"\r\n                  onChange={(event) => {\r\n                    handleSearchChangeUser(event.target.value);\r\n                  }}\r\n                />\r\n              )}\r\n              renderOption={(props, option) => (\r\n                <li {...props}>\r\n                  <Box display=\"flex\" alignItems=\"center\">\r\n                    <Avatar src={option.avatarUrl} alt={option.name} sx={{ width: 25, height: 25, marginRight: 1 }} />\r\n                    {option.name}\r\n                  </Box>\r\n                </li>\r\n              )}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"standard-basic\"\r\n              label=\"Channel by ID\"\r\n              variant=\"filled\"\r\n              onChange={(event) => {\r\n                handleSearchChangeID(event.target.value);\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            {outputError && (\r\n              <Typography variant=\"body2\" style={{ color: 'red', marginTop: '10px', textAlign: 'center' }}>\r\n                {outputError}\r\n              </Typography>\r\n            )}\r\n            {!localStorage.getItem('login') && (\r\n              <Typography variant=\"body2\" style={{ color: 'red', marginTop: '10px', textAlign: 'center' }}>\r\n                Log in with your Twitch account to use this tool\r\n              </Typography>\r\n            )}\r\n            {outputData && (\r\n              <Box\r\n                sx={{\r\n                  backgroundColor: 'rgb(250,250,250,0.1)',\r\n                  borderRadius: '5px',\r\n                  padding: '15px',\r\n                  whiteSpace: 'pre-wrap',\r\n                  maxWidth: '100%',\r\n                  overflowX: 'auto'\r\n                }}\r\n              >\r\n                <Typography variant=\"body2\" component=\"pre\">\r\n                  <strong>id:</strong> {outputData.id}\r\n                  <br />\r\n                  <strong>login:</strong> {outputData.login}\r\n                  <br />\r\n                  <strong>display_name:</strong> {outputData.display_name}\r\n                  <br />\r\n                  <strong>type:</strong> {outputData.type === '' ? 'default' : outputData.type}\r\n                  <br />\r\n                  <strong>broadcaster_type:</strong> {outputData.broadcaster_type === '' ? 'default' : outputData.broadcaster_type}\r\n                  <br />\r\n                  <strong>description:</strong> {outputData.description === '' ? 'default' : outputData.description}\r\n                  <br />\r\n                  <strong>profile_image_url:</strong>{' '}\r\n                  {outputData.profile_image_url === '' ? (\r\n                    'default'\r\n                  ) : (\r\n                    <Link target=\"_blank\" href={outputData.profile_image_url}>\r\n                      {outputData.profile_image_url}\r\n                    </Link>\r\n                  )}\r\n                  <br />\r\n                  <strong>offline_image_url:</strong>{' '}\r\n                  {outputData.offline_image_url === '' ? (\r\n                    'default'\r\n                  ) : (\r\n                    <Link target=\"_blank\" href={outputData.offline_image_url}>\r\n                      {outputData.offline_image_url}\r\n                    </Link>\r\n                  )}\r\n                  <br />\r\n                  <strong>created_at:</strong> {outputData.created_at} ({humanizeLong(new Date(outputData.created_at).getTime())} ago)\r\n                </Typography>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  href={`https://www.twitch.tv/${outputData.login}`}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  style={{ marginTop: '10px' }}\r\n                >\r\n                  Visit Channel\r\n                </Button>\r\n              </Box>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </TabPanel>\r\n\r\n      <Snackbar open={openError} autoHideDuration={2500} onClose={closeError}>\r\n        <Alert onClose={closeError} severity=\"error\" sx={{ width: '100%' }}>\r\n          {errorReason}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      <Snackbar open={openSuccess} autoHideDuration={1500} onClose={closeSuccess}>\r\n        <Alert onClose={closeSuccess} severity=\"success\" sx={{ width: '100%' }}>\r\n          {successReason}\r\n        </Alert>\r\n      </Snackbar>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["Alert","React","props","ref","_jsx","MuiAlert","elevation","variant","TabPanel","children","value","index","other","role","hidden","id","Box","sx","p","Typography","a11yProps","async","getChannel","localStorage","getItem","response","fetch","encodeURIComponent","trim","responseType","throwHttpErrors","headers","Authorization","JSON","parse","access_token","client_id","data","json","ok","Error","message","error","statusText","Page","searchResults","setSearchResults","useState","searchResultsUser","setSearchResultsUser","game","setGame","name","avatarUrl","title","setTitle","openError","setOpenError","openSuccess","setOpenSuccess","errorReason","setErrorReason","successReason","setSuccessReason","channel","setChannel","outputData","setOutputData","outputError","setOutputError","setValue","useEffect","document","split","err","fetchData","loginData","responseA","dataA","length","channelData","game_name","game_id","console","showError","closeError","event","reason","closeSuccess","_jsxs","MainCard","description","Tabs","onChange","handleChange","newValue","Tab","label","Grid","container","spacing","item","xs","sm","TextField","fullWidth","e","target","autoFocus","Autocomplete","options","getOptionLabel","option","isOptionEqualToValue","renderInput","params","decodeURIComponent","map","category","box_art_url","replace","handleSearchChange","renderOption","display","alignItems","Avatar","src","alt","width","height","marginRight","Button","onClick","broadcasterId","_game$id","method","body","stringify","RegExp","test","display_name","broadcaster_login","thumbnail_url","handleSearchChangeUser","handleSearchChangeID","style","color","marginTop","textAlign","backgroundColor","borderRadius","padding","whiteSpace","maxWidth","overflowX","component","login","type","broadcaster_type","profile_image_url","Link","href","offline_image_url","created_at","ms","Date","getTime","humanizeDuration","now","units","largest","round","spacer","conjunction","serialComma","zero","rel","Snackbar","open","autoHideDuration","onClose","severity"],"sourceRoot":""}