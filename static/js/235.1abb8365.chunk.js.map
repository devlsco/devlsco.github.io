{"version":3,"file":"static/js/235.1abb8365.chunk.js","mappings":"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","sources":["views/twitch/giveaways/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { generate } from 'random-words';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  FormControlLabel,\r\n  InputAdornment,\r\n  FormLabel,\r\n  Box,\r\n  Avatar,\r\n  Autocomplete,\r\n  Skeleton,\r\n  FormControl,\r\n  RadioGroup,\r\n  Radio,\r\n  Button,\r\n  Typography\r\n} from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport tmi from 'tmi.js';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: 'dark'\r\n  }\r\n});\r\n\r\nconst client = new tmi.Client({});\r\nclient.connect();\r\n\r\nconst bots = ['62809083', '19264788', '711348782', '100135110', '237719657', '1564983', '46209051', '105166207'];\r\n\r\nfunction getRandomElementsFromArray(arr, count) {\r\n  if (count >= arr.length) {\r\n    // Wenn die Anzahl größer oder gleich der Array-Länge ist,\r\n    // geben wir den gesamten Array zurück\r\n    return arr;\r\n  }\r\n\r\n  const shuffled = arr.slice(); // Kopie des Arrays erstellen\r\n  let currentIndex = arr.length;\r\n\r\n  // Während es noch Elemente gibt, die noch nicht ausgewählt wurden\r\n  while (currentIndex > 0) {\r\n    // Zufälligen Index auswählen\r\n    const randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // Elemente tauschen\r\n    const temporaryValue = shuffled[currentIndex];\r\n    shuffled[currentIndex] = shuffled[randomIndex];\r\n    shuffled[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  // Die ersten 'count' Elemente zurückgeben\r\n  return shuffled.slice(0, count);\r\n}\r\n\r\nconst Page = () => {\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [channel, setChannel] = useState({\r\n    name: localStorage.getItem('login') ? JSON.parse(localStorage.getItem('login')).login : '',\r\n    login: localStorage.getItem('login') ? JSON.parse(localStorage.getItem('login')).login : '',\r\n    id: localStorage.getItem('login') ? JSON.parse(localStorage.getItem('login')).id : null,\r\n    avatarUrl: localStorage.getItem('login') ? JSON.parse(localStorage.getItem('login')).profile_image_url : null\r\n  });\r\n  const [value, setValue] = useState('active-users');\r\n  const [drawUsersValue, setDrawUsersValue] = useState(1);\r\n  const [activTimeoutValue, setActivTimeoutValue] = useState(5);\r\n  const [keywordValue, setKeywordValue] = useState(generate({ minLength: 10 }));\r\n\r\n  const [outputData, setOutputData] = useState(null);\r\n  const [outputError, setOutputError] = useState(null);\r\n\r\n  const [giveawayUsersValue, setGiveawayUsersValue] = useState([]);\r\n  const [giveawayStartedValue, setGiveawayStartedValue] = useState(false);\r\n\r\n  const handleRadioChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handleSearchChange = async (value) => {\r\n    if (!localStorage.getItem('login')) {\r\n      return setSearchResults([]);\r\n    }\r\n\r\n    if (value.trim() !== '') {\r\n      try {\r\n        const response = await fetch(`https://api.twitch.tv/helix/search/channels?query=${value}&first=25`, {\r\n          headers: {\r\n            Authorization: `Bearer ${JSON.parse(localStorage.getItem('login')).access_token}`,\r\n            'Client-ID': JSON.parse(localStorage.getItem('login')).client_id\r\n          }\r\n        });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setSearchResults(\r\n            data.data.map((channel) => ({\r\n              name: channel.display_name,\r\n              login: channel.broadcaster_login,\r\n              id: channel.id,\r\n              avatarUrl: channel.thumbnail_url.replace('300x300', '50x50')\r\n            }))\r\n          );\r\n        } else {\r\n          setSearchResults([]);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n        setSearchResults([]);\r\n      }\r\n    } else {\r\n      setSearchResults([]);\r\n    }\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    if (giveawayStartedValue) {\r\n      if (client.getChannels().includes(channel.login)) {\r\n        await client.part(channel.login);\r\n      }\r\n\r\n      if (giveawayUsersValue.length < 1) {\r\n        setOutputData(null);\r\n        setGiveawayStartedValue(false);\r\n        setOutputError('No user has registered.');\r\n        return;\r\n      }\r\n\r\n      setGiveawayStartedValue(false);\r\n      setOutputData(\r\n        <React.Fragment>\r\n          <Typography variant=\"h4\">Giveaway ended - {drawUsersValue} user(s) won!</Typography>\r\n          <br />\r\n          <Typography variant=\"h4\">\r\n            Users:{' '}\r\n            {getRandomElementsFromArray([...new Set(giveawayUsersValue.map((i) => i['username']))], drawUsersValue)\r\n              .map((i, _) => `${_ + 1}. ${i}`)\r\n              .join(', ')}\r\n          </Typography>\r\n        </React.Fragment>\r\n      );\r\n      setGiveawayUsersValue([]);\r\n      setOutputError(null);\r\n      return;\r\n    }\r\n\r\n    if (!localStorage.getItem('login')) {\r\n      setOutputData(null);\r\n      setGiveawayStartedValue(false);\r\n      setOutputError('Log in to get started.');\r\n      return;\r\n    }\r\n\r\n    if (!channel.id) {\r\n      setOutputData(null);\r\n      setGiveawayStartedValue(false);\r\n      setOutputError('You must specify a channel.');\r\n      return;\r\n    }\r\n\r\n    if (\r\n      isNaN(activTimeoutValue) ||\r\n      !(Number.isInteger(Number(activTimeoutValue)) && Number(activTimeoutValue) >= 1 && Number(activTimeoutValue) <= 10)\r\n    ) {\r\n      setOutputData(null);\r\n      setGiveawayStartedValue(false);\r\n      setOutputError(\"The value for 'Active Timeout' must be an integer between 1 and 10.\");\r\n      return;\r\n    }\r\n\r\n    if (!(Number.isInteger(Number(drawUsersValue)) && Number(drawUsersValue) >= 1 && Number(drawUsersValue) <= 50)) {\r\n      setOutputData(null);\r\n      setGiveawayStartedValue(false);\r\n      setOutputError(\"The value for 'Draw Users' must be an integer between 1 and 50.\");\r\n      return;\r\n    }\r\n\r\n    if (!keywordValue.trim().length) {\r\n      setOutputData(null);\r\n      setGiveawayStartedValue(false);\r\n      setOutputError('You have not entered a keyword.');\r\n      return;\r\n    }\r\n\r\n    setGiveawayUsersValue([]);\r\n\r\n    if (!client.getChannels().includes(channel.login)) {\r\n      await client.join(channel.login);\r\n    }\r\n\r\n    client.on('message', (_, tags, message) => {\r\n      const regex = new RegExp(`(?<!\\\\S)(${keywordValue})(?!\\\\S)`);\r\n\r\n      if (bots.includes(tags['user-id']) || tags.username.match(/^.+bot$/i)) return;\r\n\r\n      if (tags['room-id'] !== channel.id) return;\r\n\r\n      switch (value) {\r\n        case 'active-users': {\r\n          setGiveawayUsersValue((prevUsers) => [...prevUsers, tags]);\r\n\r\n          setTimeout(() => {\r\n            setGiveawayUsersValue((prevUsers) => prevUsers.filter((user) => user.id !== tags.id));\r\n          }, Number(activTimeoutValue) * 60000);\r\n          return;\r\n        }\r\n        case 'keyword': {\r\n          if (!regex.test(message)) return;\r\n          if (regex.test(message)) {\r\n            setGiveawayUsersValue((prevUsers) => [...prevUsers, tags]);\r\n\r\n            setTimeout(() => {\r\n              setGiveawayUsersValue((prevUsers) => prevUsers.filter((user) => user.id !== tags.id));\r\n            }, Number(activTimeoutValue) * 60000);\r\n          }\r\n          return;\r\n        }\r\n        default:\r\n          return;\r\n      }\r\n    });\r\n\r\n    setGiveawayStartedValue(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (giveawayStartedValue === false) {\r\n      client.removeAllListeners();\r\n    }\r\n  }, [giveawayStartedValue]);\r\n\r\n  useEffect(() => {\r\n    document.title = 'LsCo Software - Giveaways';\r\n\r\n    if (!localStorage.getItem('login')) {\r\n      setOutputData('Log in to get started.');\r\n      setOutputError(null);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      if (giveawayStartedValue) {\r\n        if (!localStorage.getItem('login')) {\r\n          setOutputData(null);\r\n          setGiveawayStartedValue(false);\r\n          setOutputError('Log in to get started.');\r\n          return;\r\n        }\r\n\r\n        if (!channel.id) {\r\n          setOutputData(null);\r\n          setGiveawayStartedValue(false);\r\n          setOutputError('You must specify a channel.');\r\n          return;\r\n        }\r\n\r\n        if (\r\n          isNaN(activTimeoutValue) ||\r\n          !(Number.isInteger(Number(activTimeoutValue)) && Number(activTimeoutValue) >= 1 && Number(activTimeoutValue) <= 10)\r\n        ) {\r\n          setOutputData(null);\r\n          setGiveawayStartedValue(false);\r\n          setOutputError(\"The value for 'Active Timeout' must be an integer between 1 and 10.\");\r\n          return;\r\n        }\r\n\r\n        if (!(Number.isInteger(Number(drawUsersValue)) && Number(drawUsersValue) >= 1 && Number(drawUsersValue) <= 50)) {\r\n          setOutputData(null);\r\n          setGiveawayStartedValue(false);\r\n          setOutputError(\"The value for 'Draw Users' must be an integer between 1 and 50.\");\r\n          return;\r\n        }\r\n\r\n        if (!keywordValue.trim().length) {\r\n          setOutputData(null);\r\n          setGiveawayStartedValue(false);\r\n          setOutputError('You have not entered a keyword.');\r\n          return;\r\n        }\r\n\r\n        setOutputError(null);\r\n        setOutputData(`${[...new Set(giveawayUsersValue.map((i) => i['user-id']))].length} Chatters logged in`);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, [giveawayUsersValue, giveawayStartedValue, activTimeoutValue, channel, drawUsersValue, keywordValue]);\r\n\r\n  return (\r\n    <MainCard title=\"Giveaways\" description=\"Reward viewers of any channel with giveaways.\">\r\n      <Grid container spacing={2} alignItems=\"stretch\">\r\n        <Grid item xs={12} sm={8}>\r\n          <Grid container spacing={2} alignItems=\"center\">\r\n            <Grid item xs={4}>\r\n              <FormControl>\r\n                <FormLabel id=\"giveaway-type-label\">Giveaway Type</FormLabel>\r\n                <RadioGroup row aria-labelledby=\"giveaway-type-label\" name=\"giveaway-type\" value={value} onChange={handleRadioChange}>\r\n                  <FormControlLabel value=\"active-users\" control={<Radio />} label=\"Active Chatter\" />\r\n                  <FormControlLabel value=\"keyword\" control={<Radio />} label=\"Keyword\" />\r\n                </RadioGroup>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n              {outputError && (\r\n                <Typography variant=\"body2\" style={{ color: 'red', textAlign: 'center' }}>\r\n                  {outputError}\r\n                </Typography>\r\n              )}\r\n              {outputData && (\r\n                <Typography variant=\"body2\" style={{ textAlign: 'center' }}>\r\n                  {outputData}\r\n                </Typography>\r\n              )}\r\n            </Grid>\r\n            <ThemeProvider theme={theme}>\r\n              <Grid item xs={12}>\r\n                <FormLabel component=\"h2\">Number of winners: {Number(drawUsersValue)}</FormLabel>\r\n                <TextField\r\n                  autoFocus\r\n                  fullWidth\r\n                  type=\"number\"\r\n                  id=\"winners-number\"\r\n                  value={drawUsersValue}\r\n                  onChange={(e) => setDrawUsersValue(e.target.value)}\r\n                  InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">Draw users</InputAdornment>\r\n                  }}\r\n                  variant=\"outlined\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <FormLabel component=\"h2\">Eligible active users within the past {Number(activTimeoutValue)} minute(s) to win</FormLabel>\r\n                <TextField\r\n                  autoFocus\r\n                  fullWidth\r\n                  type=\"number\"\r\n                  id=\"active-users-timeout\"\r\n                  value={activTimeoutValue}\r\n                  onChange={(e) => setActivTimeoutValue(e.target.value)}\r\n                  InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">Active Timeout</InputAdornment>\r\n                  }}\r\n                  variant=\"outlined\"\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                {value === 'keyword' && (\r\n                  <>\r\n                    <FormLabel component=\"h2\">Keyword for eligibility (case insensitive)</FormLabel>\r\n                    <TextField\r\n                      fullWidth\r\n                      autoFocus\r\n                      id=\"keyword-input\"\r\n                      value={keywordValue}\r\n                      onChange={(e) => setKeywordValue(e.target.value)}\r\n                      InputProps={{\r\n                        startAdornment: <InputAdornment position=\"start\">Keyword</InputAdornment>\r\n                      }}\r\n                      variant=\"outlined\"\r\n                    />\r\n                  </>\r\n                )}\r\n              </Grid>\r\n            </ThemeProvider>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12} sm={4}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={12}>\r\n              <ThemeProvider theme={theme}>\r\n                <Autocomplete\r\n                  options={searchResults}\r\n                  value={channel}\r\n                  getOptionLabel={(option) => option.name}\r\n                  isOptionEqualToValue={(option, value) => option.name === value.name}\r\n                  onChange={(event, value) => {\r\n                    setChannel(value);\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      fullWidth\r\n                      id=\"channel-input\"\r\n                      label=\"Channel\"\r\n                      variant=\"outlined\"\r\n                      onChange={(event) => {\r\n                        handleSearchChange(event.target.value);\r\n                      }}\r\n                    />\r\n                  )}\r\n                  renderOption={(props, option) => (\r\n                    <li {...props}>\r\n                      <Box display=\"flex\" alignItems=\"center\">\r\n                        <Avatar src={option.avatarUrl} alt={option.name} sx={{ width: 25, height: 25, marginRight: 1 }} />\r\n                        {option.name}\r\n                      </Box>\r\n                    </li>\r\n                  )}\r\n                />\r\n              </ThemeProvider>\r\n            </Grid>\r\n            <Grid item xs={12} sm={12}>\r\n              {channel ? (\r\n                <iframe\r\n                  style={{\r\n                    backgroundColor: 'transparent',\r\n                    border: '0px solid',\r\n                    width: '100%',\r\n                    height: '400px',\r\n                    borderRadius: '5px'\r\n                  }}\r\n                  id=\"twitch-chat-embed\"\r\n                  title=\"Twitch Chat\"\r\n                  src={`https://www.twitch.tv/embed/${channel.login}/chat?darkpopout&parent=localhost`}\r\n                ></iframe>\r\n              ) : (\r\n                <Skeleton variant=\"rounded\" width={'100%'} height={400} />\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={12} sm={12}>\r\n              <Button fullWidth variant=\"outlined\" onClick={handleClick}>\r\n                {giveawayStartedValue ? 'Roll it!' : 'Start'}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["theme","createTheme","palette","mode","client","tmi","connect","bots","getRandomElementsFromArray","arr","count","length","shuffled","slice","currentIndex","randomIndex","Math","floor","random","temporaryValue","Page","searchResults","setSearchResults","useState","channel","setChannel","name","localStorage","getItem","JSON","parse","login","id","avatarUrl","profile_image_url","value","setValue","drawUsersValue","setDrawUsersValue","activTimeoutValue","setActivTimeoutValue","keywordValue","setKeywordValue","generate","minLength","outputData","setOutputData","outputError","setOutputError","giveawayUsersValue","setGiveawayUsersValue","giveawayStartedValue","setGiveawayStartedValue","useEffect","removeAllListeners","document","title","async","isNaN","Number","isInteger","trim","Set","map","i","fetchData","_jsx","MainCard","description","children","_jsxs","Grid","container","spacing","alignItems","item","xs","sm","FormControl","FormLabel","RadioGroup","row","onChange","event","target","FormControlLabel","control","Radio","label","Typography","variant","style","color","textAlign","ThemeProvider","component","TextField","autoFocus","fullWidth","type","e","InputProps","startAdornment","InputAdornment","position","_Fragment","Autocomplete","options","getOptionLabel","option","isOptionEqualToValue","renderInput","params","response","fetch","headers","Authorization","access_token","client_id","ok","data","json","display_name","broadcaster_login","thumbnail_url","replace","error","console","handleSearchChange","renderOption","props","Box","display","Avatar","src","alt","sx","width","height","marginRight","backgroundColor","border","borderRadius","Skeleton","Button","onClick","getChannels","includes","part","React","_","join","on","tags","message","regex","RegExp","username","match","prevUsers","setTimeout","filter","user","test"],"sourceRoot":""}