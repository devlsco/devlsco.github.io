{"version":3,"file":"static/js/436.5766c59c.chunk.js","mappings":"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","sources":["views/dashboard/index.js"],"sourcesContent":["import { ThemeProvider, createTheme } from '@mui/material/styles';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Grid, Autocomplete, Button, TextField, Avatar, Box, Snackbar } from '@mui/material';\r\nimport MuiAlert from '@mui/material/Alert';\r\n\r\nimport MainCard from 'ui-component/cards/MainCard';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: 'dark'\r\n  }\r\n});\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nconst Page = () => {\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [game, setGame] = useState({ name: '', id: null, avatarUrl: '' });\r\n  const [title, setTitle] = useState('');\r\n  const [openError, setOpenError] = useState(false);\r\n  const [openSuccess, setOpenSuccess] = useState(false);\r\n  const [errorReason, setErrorReason] = useState('');\r\n  const [successReason, setSuccessReason] = useState('');\r\n\r\n  useEffect(() => {\r\n    document.title = 'LsCo Software - Dashboard';\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const loginData = JSON.parse(localStorage.getItem('login'));\r\n      const isLoggedIn = localStorage.getItem('login') !== null;\r\n\r\n      if (isLoggedIn) {\r\n        try {\r\n          const responseA = await fetch(`https://api.twitch.tv/helix/channels?broadcaster_id=${loginData.id}`, {\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id\r\n            }\r\n          });\r\n\r\n          const dataA = await responseA.json();\r\n\r\n          if (responseA.ok && dataA.data.length > 0) {\r\n            const channelData = dataA.data[0];\r\n            setGame({\r\n              name: channelData.game_name.length ? channelData.game_name : 'None',\r\n              id: channelData.game_id.length ? channelData.game_id : 0,\r\n              avatarUrl: ''\r\n            });\r\n            setTitle(channelData.title);\r\n          }\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const showError = () => {\r\n    setOpenError(true);\r\n  };\r\n\r\n  const closeError = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpenError(false);\r\n  };\r\n\r\n  const showSuccess = () => {\r\n    setOpenSuccess(true);\r\n  };\r\n\r\n  const closeSuccess = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpenSuccess(false);\r\n  };\r\n\r\n  const updateProperties = async () => {\r\n    const loginData = JSON.parse(localStorage.getItem('login'));\r\n    if (!loginData) {\r\n      setErrorReason('Log in with your Twitch account to use this tool');\r\n      showError();\r\n      return;\r\n    }\r\n\r\n    const broadcasterId = decodeURIComponent(loginData.id);\r\n\r\n    try {\r\n      const response = await fetch(`https://api.twitch.tv/helix/channels?broadcaster_id=${broadcasterId}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          Authorization: 'Bearer ' + loginData.access_token,\r\n          'Client-ID': loginData.client_id,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          game_id: game.id ?? 0,\r\n          title: title.length ? title : ' '\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const data = await response.json();\r\n        setErrorReason(data.message);\r\n        showError();\r\n      } else {\r\n        setSuccessReason('Successfully updated your title & game.');\r\n        showSuccess();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = async (value) => {\r\n    if (!localStorage.getItem('login')) {\r\n      return setSearchResults([]);\r\n    }\r\n\r\n    if (value.trim() !== '') {\r\n      const response = await fetch(`https://api.twitch.tv/helix/search/categories?query=${decodeURIComponent(value)}&first=15`, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n          'Client-ID': JSON.parse(localStorage.getItem('login')).client_id\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setSearchResults(\r\n          data.data.map((category) => ({\r\n            name: category.name,\r\n            id: category.id,\r\n            avatarUrl: category.box_art_url.replace('500', '520')\r\n          }))\r\n        );\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } else {\r\n      setSearchResults([]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Dashboard\" description=\"Here you can update the stream or get info about a user.\">\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} sm={6}>\r\n          <ThemeProvider theme={theme}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              label=\"Title\"\r\n              variant=\"outlined\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              autoFocus\r\n            />\r\n          </ThemeProvider>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <ThemeProvider theme={theme}>\r\n            <Autocomplete\r\n              value={game}\r\n              options={searchResults}\r\n              getOptionLabel={(option) => {\r\n                return option.name;\r\n              }}\r\n              onChange={(event, value) => {\r\n                setGame(value ?? { name: '', id: null, avatarUrl: '' });\r\n              }}\r\n              isOptionEqualToValue={(option, value) => option.id === value.id}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  fullWidth\r\n                  id=\"outlined-basic\"\r\n                  label=\"Game\"\r\n                  variant=\"outlined\"\r\n                  onChange={(event) => {\r\n                    handleSearchChange(event.target.value);\r\n                  }}\r\n                />\r\n              )}\r\n              renderOption={(props, option) => (\r\n                <li {...props}>\r\n                  <Box display=\"flex\" alignItems=\"center\">\r\n                    <Avatar variant=\"square\" src={option.avatarUrl} alt={option.name} sx={{ width: 35, height: 45, marginRight: 1 }} />\r\n                    {option.name}\r\n                  </Box>\r\n                </li>\r\n              )}\r\n            />\r\n          </ThemeProvider>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button variant=\"text\" fullWidth onClick={updateProperties}>\r\n            Update\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Snackbar open={openError} autoHideDuration={2500} onClose={closeError}>\r\n        <Alert onClose={closeError} severity=\"error\" sx={{ width: '100%' }}>\r\n          {errorReason}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      <Snackbar open={openSuccess} autoHideDuration={1500} onClose={closeSuccess}>\r\n        <Alert onClose={closeSuccess} severity=\"success\" sx={{ width: '100%' }}>\r\n          {successReason}\r\n        </Alert>\r\n      </Snackbar>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["theme","createTheme","palette","mode","Alert","React","props","ref","_jsx","MuiAlert","elevation","variant","Page","searchResults","setSearchResults","useState","game","setGame","name","id","avatarUrl","title","setTitle","openError","setOpenError","openSuccess","setOpenSuccess","errorReason","setErrorReason","successReason","setSuccessReason","useEffect","document","async","loginData","JSON","parse","localStorage","getItem","responseA","fetch","headers","Authorization","access_token","client_id","dataA","json","ok","data","length","channelData","game_name","game_id","error","console","fetchData","showError","closeError","event","reason","closeSuccess","_jsxs","MainCard","description","children","Grid","container","spacing","item","xs","sm","ThemeProvider","TextField","fullWidth","label","value","onChange","e","target","autoFocus","Autocomplete","options","getOptionLabel","option","isOptionEqualToValue","renderInput","params","trim","response","decodeURIComponent","map","category","box_art_url","replace","handleSearchChange","renderOption","Box","display","alignItems","Avatar","src","alt","sx","width","height","marginRight","Button","onClick","broadcasterId","_game$id","method","body","stringify","message","Snackbar","open","autoHideDuration","onClose","severity"],"sourceRoot":""}