{"version":3,"file":"static/js/312.e049d7fd.chunk.js","mappings":"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","sources":["views/twitch/crossban/index.js"],"sourcesContent":["import { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\nimport { BsPersonFillAdd } from 'react-icons/bs';\r\n\r\nimport {\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  MenuItem,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  Box,\r\n  Slider,\r\n  Autocomplete,\r\n  Paper,\r\n  Chip,\r\n  Avatar\r\n} from '@mui/material';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nconst darkTheme = createTheme({\r\n  palette: {\r\n    mode: 'dark'\r\n  }\r\n});\r\n\r\nconst ListItem = styled('li')(({ theme }) => ({\r\n  margin: theme.spacing(0.5)\r\n}));\r\n\r\nconst marks = [\r\n  {\r\n    value: 25,\r\n    label: '25'\r\n  },\r\n  {\r\n    value: 100,\r\n    label: '100'\r\n  },\r\n  {\r\n    value: 250,\r\n    label: '250'\r\n  },\r\n  {\r\n    value: 500,\r\n    label: '500'\r\n  },\r\n  {\r\n    value: 750,\r\n    label: '750'\r\n  },\r\n  {\r\n    value: 1000,\r\n    label: '1000'\r\n  }\r\n];\r\n\r\nfunction valuetext(value) {\r\n  return `${value}ms`;\r\n}\r\n\r\nconst getNames = async (channels) => {\r\n  if (!localStorage.getItem('login')) return null;\r\n\r\n  const idParams = channels.map((channel) => `id=${encodeURIComponent(channel.id)}`).join('&');\r\n  const url = `https://api.twitch.tv/helix/users?${idParams}`;\r\n\r\n  const response = await fetch(url, {\r\n    headers: {\r\n      Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n      'Client-ID': JSON.parse(localStorage.getItem('login')).client_id\r\n    }\r\n  });\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message ? `${data.error}, ${data.message}` : response.statusText);\r\n  }\r\n\r\n  const names = data.data.map((user) => ({ id: user.id, name: user.login, pfp: user.profile_image_url.replace('300x300', '50x50') }));\r\n  return names;\r\n};\r\n\r\nfunction chunkArray(array, size) {\r\n  let result = [];\r\n  for (let i = 0; i < array.length; i += size) {\r\n    let chunk = array.slice(i, i + size);\r\n    result.push(chunk);\r\n  }\r\n  return result;\r\n}\r\n\r\nconst Page = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [outputData, setOutputData] = useState(null);\r\n  const [outputError, setOutputError] = useState(null);\r\n  const [selectedType, setSelectedType] = useState('');\r\n  const [channel, setChannel] = useState('');\r\n  const [sliderValue, setSliderValue] = useState(100);\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [chipData, setChipData] = useState([]);\r\n\r\n  const handleDelete = (chipToDelete) => {\r\n    localStorage.setItem(\r\n      'crossbanChannels',\r\n      JSON.stringify(JSON.parse(localStorage.getItem('crossbanChannels')).filter((chip) => chip.id !== chipToDelete.id))\r\n    );\r\n    setChipData((chips) => chips.filter((chip) => chip.id !== chipToDelete.id));\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.title = `LsCo Software - Crossban`;\r\n\r\n    const login = localStorage.getItem('login') || null;\r\n\r\n    if (!login) {\r\n      setOutputData('Log in to get started.');\r\n      setOutputError(null);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const storedChannels = localStorage.getItem('crossbanChannels');\r\n      if (storedChannels) {\r\n        const parsedChannels = JSON.parse(storedChannels);\r\n        const names = await getNames(parsedChannels);\r\n        setChipData(names ?? []);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  async function banUser(channelID, users) {\r\n    try {\r\n      await Promise.all(\r\n        chunkArray(users, 100).map(async (chunk) => {\r\n          const response = await fetch(`https://api.twitch.tv/helix/users?login=${chunk.map((data) => data.login).join('&login=')}`, {\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id\r\n            }\r\n          });\r\n          const data = await response.json();\r\n          if (!response.ok) throw new Error(`API Error -> Status: ${data.error}, ${data.status} - ${data.message}`);\r\n\r\n          data.data.forEach((user) => {\r\n            const existingUser = users.find((u) => u.login === user.login);\r\n            if (existingUser) existingUser.id = user.id;\r\n          });\r\n\r\n          return data.data.map((user) => user.id);\r\n        })\r\n      );\r\n\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).id\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, reason: data.reason } })\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function timeoutUser(channelID, users) {\r\n    try {\r\n      await Promise.all(\r\n        chunkArray(users, 100).map(async (chunk) => {\r\n          const response = await fetch(`https://api.twitch.tv/helix/users?login=${chunk.map((data) => data.login).join('&login=')}`, {\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id\r\n            }\r\n          });\r\n          const data = await response.json();\r\n          if (!response.ok) throw new Error(`API Error -> Status: ${data.error}, ${data.status} - ${data.message}`);\r\n\r\n          data.data.forEach((user) => {\r\n            const existingUser = users.find((u) => u.login === user.login);\r\n            if (existingUser) existingUser.id = user.id;\r\n          });\r\n\r\n          return data.data.map((user) => user.id);\r\n        })\r\n      );\r\n\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).id\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, duration: Number(data.duration), reason: data.reason } })\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function banUser_id(channelID, users) {\r\n    try {\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).id\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, reason: data.reason } })\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function timeoutUser_id(channelID, users) {\r\n    try {\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).id\r\n          }`,\r\n          {\r\n            method: 'POST',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id,\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ data: { user_id: data.id, duration: Number(data.duration), reason: data.reason } })\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function unbanUser(channelID, users) {\r\n    try {\r\n      await Promise.all(\r\n        chunkArray(users, 100).map(async (chunk) => {\r\n          const response = await fetch(`https://api.twitch.tv/helix/users?login=${chunk.map((data) => data.login).join('&login=')}`, {\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id\r\n            }\r\n          });\r\n          const data = await response.json();\r\n          if (!response.ok) throw new Error(`API Error -> Status: ${data.error}, ${data.status} - ${data.message}`);\r\n\r\n          data.data.forEach((user) => {\r\n            const existingUser = users.find((u) => u.login === user.login);\r\n            if (existingUser) existingUser.id = user.id;\r\n          });\r\n\r\n          return data.data.map((user) => user.id);\r\n        })\r\n      );\r\n\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).id\r\n          }&user_id=${data.id}`,\r\n          {\r\n            method: 'DELETE',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id,\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n        );\r\n\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  async function unbanUser_id(channelID, users) {\r\n    try {\r\n      for (let i = 0; i < users.length; i++) {\r\n        const data = users[i];\r\n\r\n        fetch(\r\n          `https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${channelID}&moderator_id=${\r\n            JSON.parse(localStorage.getItem('login')).id\r\n          }&user_id=${data.id}`,\r\n          {\r\n            method: 'DELETE',\r\n            headers: {\r\n              Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n              'Client-ID': JSON.parse(localStorage.getItem('login')).client_id,\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n        );\r\n        await new Promise((x) => setTimeout(x, sliderValue));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      throw new Error(`Error: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  const handleSearchChange = async (value) => {\r\n    const login = localStorage.getItem('login');\r\n\r\n    if (!login) {\r\n      return setSearchResults([]);\r\n    }\r\n\r\n    if (value.trim() !== '') {\r\n      const response = await fetch(`https://api.twitch.tv/helix/search/channels?query=${value}&first=25`, {\r\n        headers: {\r\n          Authorization: 'Bearer ' + JSON.parse(localStorage.getItem('login')).access_token,\r\n          'Client-ID': JSON.parse(localStorage.getItem('login')).client_id\r\n        }\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setSearchResults(\r\n          data.data.map((channel) => {\r\n            return {\r\n              name: `${channel.display_name} - ID: ${channel.id}`,\r\n              avatarUrl: channel.thumbnail_url.replace('300x300', '50x50')\r\n            };\r\n          })\r\n        );\r\n      } else {\r\n        setSearchResults([]);\r\n      }\r\n    } else {\r\n      setSearchResults([]);\r\n    }\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    if (!localStorage.getItem('login')) {\r\n      setOutputData(null);\r\n      setOutputError('Log in to get started.');\r\n      return;\r\n    }\r\n\r\n    if (!chipData.length) {\r\n      setOutputData(null);\r\n      setOutputError('You must specify a channel');\r\n      return;\r\n    }\r\n\r\n    if (!selectedType) {\r\n      setOutputData(null);\r\n      setOutputError('You must specify a filesay type');\r\n      return;\r\n    }\r\n\r\n    if (!message.trim()) {\r\n      setOutputData(null);\r\n      setOutputError('You must specify a filesay list');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const text = message.split(/\\r?\\n/).map((x) => x.trim());\r\n      let type;\r\n\r\n      if (text.length >= 500) {\r\n        setOutputData(null);\r\n        setOutputError('You have too many lines.');\r\n        return;\r\n      }\r\n\r\n      setOutputData(null);\r\n      setOutputError(null);\r\n\r\n      if (selectedType === 'ban-list-id') {\r\n        type = 4;\r\n      } else if (selectedType === 'unban-list-id') {\r\n        type = 3;\r\n      } else if (selectedType === 'ban-list-name') {\r\n        type = 2;\r\n      } else if (selectedType === 'unban-list-name') {\r\n        type = 1;\r\n      } else {\r\n        type = 0;\r\n      }\r\n\r\n      const messages = [];\r\n      const timeouts = [];\r\n      const timeouts_id = [];\r\n      const unbans = [];\r\n      const bans = [];\r\n      const unbans_id = [];\r\n      const bans_id = [];\r\n\r\n      for (let i = 0; i < text.length; i++) {\r\n        const line = text[i];\r\n        if (line) {\r\n          switch (type) {\r\n            case 0: {\r\n              switch (true) {\r\n                case line.match(/^(\\.|\\/)timeout\\s\\w+\\s(\\d+)(\\s.+)?/i) !== null: {\r\n                  const [, login, duration, ...reason] = line.split(/\\s+/);\r\n                  if (!timeouts.find((x) => x.login === login.toLowerCase())) {\r\n                    timeouts.push({ login: login.toLowerCase(), duration: duration, reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)ban\\s\\w+(\\s.+)?/i) !== null: {\r\n                  const [, login, ...reason] = line.split(/\\s+/);\r\n                  if (!bans.find((x) => x.login === login.toLowerCase())) {\r\n                    bans.push({ login: login.toLowerCase(), reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)unban\\s\\w+/i) !== null || line.match(/^(\\.|\\/)untimeout\\s\\w+/i) !== null: {\r\n                  const [, login] = line.split(/\\s+/);\r\n                  if (!unbans.find((x) => x.login === login.toLowerCase())) {\r\n                    unbans.push({ login: login.toLowerCase() });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)timeoutid\\s\\w+\\s(\\d+)(\\s.+)?/i) !== null: {\r\n                  const [, id, duration, ...reason] = line.split(/\\s+/);\r\n                  if (!timeouts_id.find((x) => x.id === id)) {\r\n                    timeouts_id.push({ id: id, duration: duration, reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)banid\\s\\w+(\\s.+)?/i) !== null: {\r\n                  const [, id, ...reason] = line.split(/\\s+/);\r\n                  if (!bans_id.find((x) => x.id === id)) {\r\n                    bans_id.push({ id: id, reason: reason.join(' ') || '' });\r\n                  }\r\n                  break;\r\n                }\r\n                case line.match(/^(\\.|\\/)unbanid\\s\\w+/i) !== null || line.match(/^(\\.|\\/)untimeoutid\\s\\w+/i) !== null: {\r\n                  const [, id] = line.split(/\\s+/);\r\n                  if (!unbans_id.find((x) => x.id === id)) {\r\n                    unbans_id.push({ id: id });\r\n                  }\r\n                  break;\r\n                }\r\n                default: {\r\n                  messages.push({ message: line });\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            case 1: {\r\n              const [login] = line.split(/\\s+/);\r\n              if (!unbans.find((x) => x.login === login.toLowerCase())) {\r\n                unbans.push({ login: login.toLowerCase() });\r\n              }\r\n              break;\r\n            }\r\n            case 2: {\r\n              const [login, ...reason] = line.split(/\\s+/);\r\n              if (!bans.find((x) => x.login === login.toLowerCase())) {\r\n                bans.push({\r\n                  login: login.toLowerCase(),\r\n                  reason: reason ? reason.join(' ') : `Ban-list`\r\n                });\r\n              }\r\n              break;\r\n            }\r\n            case 3: {\r\n              const [id] = line.split(/\\s+/);\r\n              if (!unbans.find((x) => x.id === id)) {\r\n                unbans_id.push({ id: id });\r\n              }\r\n              break;\r\n            }\r\n            case 4: {\r\n              const [id, ...reason] = line.split(/\\s+/);\r\n              if (!bans.find((x) => x.id === id)) {\r\n                bans_id.push({ id: id, reason: reason ? reason.join(' ') : `Ban-list` });\r\n              }\r\n              break;\r\n            }\r\n            default: {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log('Bans', bans, bans.length);\r\n      console.log('Unbans', unbans, unbans.length);\r\n      console.log('Bans (ID)', bans_id, bans_id.length);\r\n      console.log('Unbans (ID)', unbans_id, unbans_id.length);\r\n      console.log('Timeouts', timeouts, timeouts.length);\r\n      console.log('Timeouts (ID)', timeouts_id, timeouts_id.length);\r\n      console.log('Messages', messages, messages.length);\r\n\r\n      for (let i = 0; i < chipData.length; i++) {\r\n        const channelData = chipData[i];\r\n        await Promise.all([\r\n          banUser(channelData.id, bans),\r\n          unbanUser(channelData.id, unbans),\r\n          banUser_id(channelData.id, bans_id),\r\n          unbanUser_id(channelData.id, unbans_id),\r\n          timeoutUser(channelData.id, timeouts),\r\n          timeoutUser_id(channelData.id, timeouts_id)\r\n        ]);\r\n\r\n        if (messages.length) {\r\n          const ws = new WebSocket('wss://irc-ws.chat.twitch.tv');\r\n\r\n          ws.onopen = async () => {\r\n            ws.send('CAP REQ :twitch.tv/membership twitch.tv/tags twitch.tv/commands');\r\n            ws.send('PASS oauth:' + JSON.parse(localStorage.getItem('login')).access_token);\r\n            ws.send('NICK ' + JSON.parse(localStorage.getItem('login')).login);\r\n\r\n            for (let i = 0; i < messages.length; i++) {\r\n              const message = messages[i].message;\r\n              ws.send(`PRIVMSG #${channelData.name} :${message}`);\r\n              await new Promise((x) => setTimeout(x, sliderValue));\r\n\r\n              if (i === messages.length - 1) {\r\n                ws.close();\r\n              }\r\n            }\r\n          };\r\n        }\r\n\r\n        await new Promise((x) => setTimeout(x, 500));\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      setOutputData(null);\r\n      setOutputError(err.message);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const addCrossbanChannel = async () => {\r\n    if (!localStorage.getItem('login')) {\r\n      setOutputData(null);\r\n      setOutputError('Log in to get started.');\r\n      return;\r\n    }\r\n\r\n    if (channel.name.trim() === '') {\r\n      setOutputData(null);\r\n      setOutputError('You must specify a Crossban channel');\r\n      return;\r\n    }\r\n\r\n    const channels = localStorage.getItem('crossbanChannels') ? JSON.parse(localStorage.getItem('crossbanChannels')) : [];\r\n\r\n    if (channels.find((i) => i.id === channel.name.split(' ')[3])) {\r\n      setOutputData(null);\r\n      setOutputError(`${channel.name} is already in Crossban list.`);\r\n      return;\r\n    }\r\n\r\n    channels.push({\r\n      id: channel.name.split(' ')[3]\r\n    });\r\n\r\n    localStorage.setItem('crossbanChannels', JSON.stringify(channels));\r\n\r\n    const data = await getNames([\r\n      {\r\n        id: channel.name.split(' ')[3]\r\n      }\r\n    ]);\r\n\r\n    const newChipData = [...chipData, { id: channel.name.split(' ')[3], name: data[0].name, pfp: data[0].pfp }];\r\n\r\n    setChipData(newChipData);\r\n\r\n    setOutputData(`Successfully added ${channel.name} as Crossban channel.`);\r\n    setOutputError(null);\r\n  };\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n    setSliderValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <MainCard title=\"Crossban\" description=\"Ban/timeout multiple users in multiple channels.\">\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item xs={12}>\r\n          <ThemeProvider theme={darkTheme}>\r\n            <Autocomplete\r\n              size=\"large\"\r\n              options={searchResults}\r\n              getOptionLabel={(option) => option.name}\r\n              onChange={(event, value) => setChannel(value)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  fullWidth\r\n                  id=\"outlined-basic\"\r\n                  label=\"Add Channel\"\r\n                  variant=\"outlined\"\r\n                  onChange={(event) => handleSearchChange(event.target.value)}\r\n                />\r\n              )}\r\n              renderOption={(props, option) => (\r\n                <li {...props}>\r\n                  <Box display=\"flex\" alignItems=\"center\">\r\n                    <Avatar src={option.avatarUrl} alt={option.name} sx={{ width: 25, height: 25, marginRight: 1 }} />\r\n                    {option.name}\r\n                  </Box>\r\n                </li>\r\n              )}\r\n            />\r\n          </ThemeProvider>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Button fullWidth variant=\"outlined\" onClick={addCrossbanChannel} size=\"large\">\r\n            <BsPersonFillAdd size={20} />\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Paper\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              flexWrap: 'warp',\r\n              listStyle: 'none',\r\n              p: 0.5,\r\n              m: 0\r\n            }}\r\n            component=\"ul\"\r\n          >\r\n            {chipData.map((i) => {\r\n              return (\r\n                <ListItem key={i.id}>\r\n                  <Chip avatar={<Avatar alt=\"xd\" src={i.pfp} />} label={`${i.name} - ID: ${i.id}`} onDelete={() => handleDelete(i)} />\r\n                </ListItem>\r\n              );\r\n            })}\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ThemeProvider theme={darkTheme}>\r\n            <FormControl fullWidth id=\"outlined-basic\" variant=\"outlined\">\r\n              <InputLabel id=\"type-label\">Type</InputLabel>\r\n              <Select\r\n                label=\"Type\"\r\n                value={selectedType}\r\n                onChange={(e) => setSelectedType(e.target.value)}\r\n                labelId=\"type-label\"\r\n                id=\"type-select\"\r\n              >\r\n                <MenuItem value=\"filesay\">Filesay</MenuItem>\r\n                <MenuItem value=\"ban-list-name\">Ban List (Name)</MenuItem>\r\n                <MenuItem value=\"unban-list-name\">Unban List (Name)</MenuItem>\r\n                <MenuItem value=\"ban-list-id\">Ban List (ID)</MenuItem>\r\n                <MenuItem value=\"unban-list-id\">Unban List (ID)</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </ThemeProvider>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <ThemeProvider theme={darkTheme}>\r\n            <TextField\r\n              fullWidth\r\n              multiline\r\n              rows={10}\r\n              id=\"outlined-basic\"\r\n              label=\"Text\"\r\n              variant=\"outlined\"\r\n              value={message}\r\n              onChange={(e) => setMessage(e.target.value)}\r\n            />\r\n          </ThemeProvider>\r\n        </Grid>\r\n        <Grid item xs={12} style={{ textAlign: 'right' }}>\r\n          Lines. ({message.split('\\n').length}/500)\r\n        </Grid>\r\n        <ThemeProvider theme={darkTheme}>\r\n          <Grid item xs={12}>\r\n            <Typography gutterBottom>Output speed in ms (Milliseconds)</Typography>\r\n            <FormControl fullWidth variant=\"filled\">\r\n              <Slider\r\n                aria-label=\"Delay\"\r\n                value={sliderValue}\r\n                onChange={handleSliderChange}\r\n                getAriaValueText={valuetext}\r\n                step={null}\r\n                valueLabelDisplay=\"auto\"\r\n                marks={marks}\r\n                min={marks[0].value}\r\n                max={marks[marks.length - 1].value}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n        </ThemeProvider>\r\n        <Grid item xs={12}>\r\n          <Button variant=\"contained\" fullWidth onClick={handleClick}>\r\n            Send\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          {outputError && (\r\n            <Typography variant=\"body2\" style={{ color: 'red', marginTop: '10px', textAlign: 'center' }}>\r\n              {outputError}\r\n            </Typography>\r\n          )}\r\n          {outputData && (\r\n            <Typography variant=\"body2\" style={{ marginTop: '10px', textAlign: 'center' }}>\r\n              {outputData}\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </MainCard>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n"],"names":["darkTheme","createTheme","palette","mode","ListItem","styled","_ref","theme","margin","spacing","marks","value","label","valuetext","getNames","async","localStorage","getItem","url","channels","map","channel","encodeURIComponent","id","join","response","fetch","headers","Authorization","JSON","parse","access_token","client_id","data","json","ok","Error","message","error","statusText","user","name","login","pfp","profile_image_url","replace","chunkArray","array","size","result","i","length","chunk","slice","push","Page","setMessage","useState","outputData","setOutputData","outputError","setOutputError","selectedType","setSelectedType","setChannel","sliderValue","setSliderValue","searchResults","setSearchResults","chipData","setChipData","banUser","channelID","users","Promise","all","status","forEach","existingUser","find","u","method","body","stringify","user_id","reason","x","setTimeout","console","log","timeoutUser","duration","Number","banUser_id","timeoutUser_id","unbanUser","unbanUser_id","useEffect","document","title","storedChannels","parsedChannels","names","fetchData","_jsx","MainCard","description","children","_jsxs","Grid","container","alignItems","item","xs","ThemeProvider","Autocomplete","options","getOptionLabel","option","onChange","event","renderInput","params","TextField","fullWidth","variant","trim","display_name","avatarUrl","thumbnail_url","handleSearchChange","target","renderOption","props","Box","display","Avatar","src","alt","sx","width","height","marginRight","Button","onClick","split","setItem","newChipData","BsPersonFillAdd","Paper","justifyContent","flexWrap","listStyle","p","m","component","Chip","avatar","onDelete","handleDelete","chipToDelete","filter","chip","chips","FormControl","InputLabel","Select","e","labelId","MenuItem","multiline","rows","style","textAlign","Typography","gutterBottom","Slider","handleSliderChange","newValue","getAriaValueText","step","valueLabelDisplay","min","max","text","type","messages","timeouts","timeouts_id","unbans","bans","unbans_id","bans_id","line","match","toLowerCase","channelData","ws","WebSocket","onopen","send","close","err","color","marginTop"],"sourceRoot":""}